// <auto-generated />
using System;
using DataSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataSystem.Migrations
{
    [DbContext(typeof(WebNutContext))]
    partial class WebNutContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataSystem.Models.Apistore", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("apiurl");

                    b.Property<string>("filtervalue");

                    b.Property<bool?>("isActive");

                    b.Property<DateTime?>("lastDate");

                    b.HasKey("id");

                    b.ToTable("Apistore");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("A2typeofhwinterviewed");

                    b.Property<string>("CKU");

                    b.Property<string>("DataCollector");

                    b.Property<int>("Designation");

                    b.Property<int>("FacilityId");

                    b.Property<int?>("FacilityType");

                    b.Property<int?>("FacilitytypeId");

                    b.Property<string>("Implementer");

                    b.Property<bool>("Isprogramvisit");

                    b.Property<DateTime>("MonitoringDate");

                    b.Property<string>("SamConsistancy");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FacilityType");

                    b.ToTable("Checklist");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkCGM", b =>
                {
                    b.Property<int>("IndId")
                        .HasColumnName("IndId");

                    b.Property<int>("ChkId")
                        .HasColumnName("ChkId");

                    b.Property<int>("NResponse")
                        .HasColumnName("NResponse");

                    b.Property<int>("Response")
                        .HasColumnName("Response");

                    b.Property<int>("Tenant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(50);

                    b.HasKey("IndId", "ChkId")
                        .HasName("PK_ChkCGM");

                    b.HasAlternateKey("ChkId");

                    b.HasIndex("ChkId")
                        .HasName("FK_ChkCGM_Checklist_ChkId");

                    b.HasIndex("IndId")
                        .HasName("FK_ChkCGM_lkpChecklist_IndId");

                    b.ToTable("ChkCGM");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkGM", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GetChecklistChkId");

                    b.Property<int?>("GetLkpChecklistIntId");

                    b.Property<int>("IndId");

                    b.Property<int>("NResponse");

                    b.Property<int>("Response");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("GetChecklistChkId");

                    b.HasIndex("GetLkpChecklistIntId");

                    b.ToTable("ChkGM");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkIYCFHF", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GetChecklistChkId");

                    b.Property<int?>("GetLkpChecklistIntId");

                    b.Property<int>("IndId");

                    b.Property<int>("NResponse");

                    b.Property<int>("Response");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("GetChecklistChkId");

                    b.HasIndex("GetLkpChecklistIntId");

                    b.ToTable("ChkIYCFHF");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkMN", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GetChecklistChkId");

                    b.Property<int?>("GetLkpChecklistIntId");

                    b.Property<int>("IndId");

                    b.Property<int>("NResponse");

                    b.Property<int>("Response");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("GetChecklistChkId");

                    b.HasIndex("GetLkpChecklistIntId");

                    b.ToTable("ChkMN");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkOPT", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GetChecklistChkId");

                    b.Property<int?>("GetLkpChecklistIntId");

                    b.Property<int>("IndId");

                    b.Property<int>("NResponse");

                    b.Property<int>("Response");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("GetChecklistChkId");

                    b.HasIndex("GetLkpChecklistIntId");

                    b.ToTable("ChkOPT");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkSAMHF", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GetChecklistChkId");

                    b.Property<int?>("GetLkpChecklistIntId");

                    b.Property<int>("IndId");

                    b.Property<int>("NResponse");

                    b.Property<int>("Response");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("GetChecklistChkId");

                    b.HasIndex("GetLkpChecklistIntId");

                    b.ToTable("ChkSAMHF");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkSFP", b =>
                {
                    b.Property<int>("ChkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GetChecklistChkId");

                    b.Property<int?>("GetLkpChecklistIntId");

                    b.Property<int>("IndId");

                    b.Property<int>("NResponse");

                    b.Property<int>("Response");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ChkId");

                    b.HasIndex("GetChecklistChkId");

                    b.HasIndex("GetLkpChecklistIntId");

                    b.ToTable("ChkSFP");
                });

            modelBuilder.Entity("DataSystem.Models.DistPopulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistCode");

                    b.Property<int>("Pop");

                    b.Property<int>("PopYear");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UploadDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("DistPopulation");
                });

            modelBuilder.Entity("DataSystem.Models.Districts", b =>
                {
                    b.Property<string>("DistCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("DistName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DistNameDari")
                        .HasMaxLength(50);

                    b.Property<string>("DistNamePashto")
                        .HasMaxLength(255);

                    b.Property<string>("ProvCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DistCode")
                        .HasName("Districts$PrimaryKey");

                    b.HasIndex("DistName")
                        .HasName("Districts$DistName");

                    b.HasIndex("DistNameDari")
                        .HasName("Districts$DistNameDari");

                    b.HasIndex("ProvCode")
                        .HasName("Districts$PROV_34_ID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DataSystem.Models.ERFacilities", b =>
                {
                    b.Property<int>("FacilityId")
                        .HasColumnName("FacilityID");

                    b.Property<DateTime?>("DateClosed");

                    b.Property<DateTime?>("DateEstablished")
                        .HasColumnType("date");

                    b.Property<string>("DistCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FacilityNameDari")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FacilityNamePashto")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("FacilityType")
                        .IsRequired();

                    b.Property<string>("Implementer")
                        .IsRequired()
                        .HasColumnName("Implementer");

                    b.Property<double?>("Lat")
                        .HasColumnName("LAT");

                    b.Property<string>("Location")
                        .HasMaxLength(100);

                    b.Property<string>("LocationDari")
                        .HasMaxLength(100);

                    b.Property<string>("LocationPashto")
                        .HasMaxLength(100);

                    b.Property<double?>("Lon")
                        .HasColumnName("LON");

                    b.Property<string>("ProvCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Status")
                        .HasMaxLength(2);

                    b.HasKey("FacilityId")
                        .HasName("ERFacilities$PrimaryKey");

                    b.HasIndex("DistCode")
                        .HasName("FK_FacilityInfo_Districts_DistCode2");

                    b.HasIndex("FacilityType")
                        .HasName("FK_FacilityInfo_FacilityTypes_FacilityType2");

                    b.ToTable("ERFacilities");
                });

            modelBuilder.Entity("DataSystem.Models.EmrImamServices", b =>
                {
                    b.Property<int>("IndicatorId")
                        .HasColumnName("IndicatorId");

                    b.Property<int>("ErnmrId")
                        .HasColumnName("ErnmrId");

                    b.Property<int?>("Cures");

                    b.Property<int?>("Deaths");

                    b.Property<int?>("Defaulters");

                    b.Property<int?>("Female")
                        .HasColumnType("int");

                    b.Property<int?>("Male")
                        .HasColumnType("int");

                    b.Property<int?>("Referouts");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("IndicatorId", "ErnmrId")
                        .HasName("PK_EmrIamIndicators");

                    b.HasIndex("ErnmrId")
                        .HasName("EmrIamIndicators$ErnmrId");

                    b.HasIndex("IndicatorId")
                        .HasName("EmrIamIndicators$IndicatorId");

                    b.ToTable("EmrImamServices");
                });

            modelBuilder.Entity("DataSystem.Models.EmrIndicators", b =>
                {
                    b.Property<int>("IndicatorId")
                        .HasColumnName("IndicatorId");

                    b.Property<int>("ErnmrId")
                        .HasColumnName("ErnmrId");

                    b.Property<int?>("Female")
                        .HasColumnType("int");

                    b.Property<int?>("Male")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("IndicatorId", "ErnmrId")
                        .HasName("PK_EmrIndicators");

                    b.HasIndex("ErnmrId")
                        .HasName("EmrIndicators$ErnmrId");

                    b.HasIndex("IndicatorId")
                        .HasName("EmrIndicators$IndicatorId");

                    b.ToTable("EmrIndicators");
                });

            modelBuilder.Entity("DataSystem.Models.Ernmr", b =>
                {
                    b.Property<int>("ErnmrId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Biweekly");

                    b.Property<int>("FacilityId");

                    b.Property<int?>("FacilityType");

                    b.Property<string>("Implementer");

                    b.Property<int>("Month");

                    b.Property<int>("Tenant");

                    b.Property<int>("U5Screened");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.Property<int>("mMonth");

                    b.Property<int>("mYear");

                    b.HasKey("ErnmrId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FacilityType");

                    b.ToTable("Ernmr");
                });

            modelBuilder.Entity("DataSystem.Models.FacilityInfo", b =>
                {
                    b.Property<int>("FacilityId")
                        .HasColumnName("FacilityID");

                    b.Property<string>("ActiveStatus")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DateEstablished")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("DistCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FacilityNameDari")
                        .HasMaxLength(255);

                    b.Property<string>("FacilityNamePashto")
                        .HasMaxLength(255);

                    b.Property<int?>("FacilityType")
                        .IsRequired();

                    b.Property<double?>("Gpslattitude")
                        .HasColumnName("GPSLattitude");

                    b.Property<double?>("Gpslongtitude")
                        .HasColumnName("GPSLongtitude");

                    b.Property<string>("Implementer")
                        .IsRequired();

                    b.Property<double?>("Lat")
                        .HasColumnName("LAT");

                    b.Property<string>("Location")
                        .HasMaxLength(100);

                    b.Property<string>("LocationDari")
                        .HasMaxLength(100);

                    b.Property<string>("LocationPashto")
                        .HasMaxLength(100);

                    b.Property<double?>("Lon")
                        .HasColumnName("LON");

                    b.Property<string>("SubImplementer")
                        .HasMaxLength(255);

                    b.Property<string>("ViliCode")
                        .HasMaxLength(255);

                    b.HasKey("FacilityId")
                        .HasName("FacilityInfo$PrimaryKey");

                    b.HasIndex("DistCode")
                        .HasName("FacilityInfo$DistCode");

                    b.HasIndex("FacilityType");

                    b.HasIndex("ViliCode")
                        .HasName("FacilityInfo$GOCode");

                    b.ToTable("FacilityInfo");
                });

            modelBuilder.Entity("DataSystem.Models.FacilityTypes", b =>
                {
                    b.Property<int>("FacTypeCode");

                    b.Property<string>("FacType")
                        .HasMaxLength(50);

                    b.Property<int?>("FacTypeCatCode");

                    b.Property<string>("FacTypeDari")
                        .HasMaxLength(50);

                    b.Property<string>("FacTypePashto")
                        .HasMaxLength(50);

                    b.Property<string>("TypeAbbrv")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("FacTypeCode")
                        .HasName("FacilityTypes$PrimaryKey");

                    b.HasIndex("FacTypeCatCode")
                        .HasName("FacilityTypes$FacTypeCatCode");

                    b.ToTable("FacilityTypes");
                });

            modelBuilder.Entity("DataSystem.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommentDate");

                    b.Property<string>("CommentedBy")
                        .HasMaxLength(255);

                    b.Property<string>("Message")
                        .HasMaxLength(255);

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_Feedback");

                    b.HasIndex("Nmrid");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Column", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnType");

                    b.Property<long?>("DividendColumn");

                    b.Property<long?>("DivisorColumn");

                    b.Property<long>("SectionId");

                    b.Property<int?>("SortOrder");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.DataForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<byte>("Status");

                    b.HasKey("Id");

                    b.ToTable("DataForms");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.DateValue", b =>
                {
                    b.Property<long>("FieldId");

                    b.Property<string>("ReportId");

                    b.Property<DateTime?>("Data");

                    b.Property<string>("ReportsViewId");

                    b.HasKey("FieldId", "ReportId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ReportsViewId");

                    b.ToTable("DateValues");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ColumnId");

                    b.Property<string>("DataType");

                    b.Property<int?>("ExpiryWarningPeriod");

                    b.Property<string>("InputType");

                    b.Property<bool>("IsExpiryDate");

                    b.Property<bool>("IsRequired");

                    b.Property<long>("QuestionId");

                    b.Property<string>("YesNoDefaultCaption");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.FieldOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<long>("FieldId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldOptions");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.NumberValue", b =>
                {
                    b.Property<long>("FieldId");

                    b.Property<string>("ReportId");

                    b.Property<long?>("Data");

                    b.HasKey("FieldId", "ReportId");

                    b.ToTable("NumberValues");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SectionId");

                    b.Property<int?>("SortOrder");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Report", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataCollectorOffice");

                    b.Property<int>("DataFormId");

                    b.Property<string>("DistrictId");

                    b.Property<int>("FacilityId");

                    b.Property<int>("FacilityTypeId");

                    b.Property<int>("ImpId");

                    b.Property<string>("ProvinceId");

                    b.Property<double?>("ReportLat");

                    b.Property<double?>("ReportLon");

                    b.Property<DateTime?>("ReportPreparedDate");

                    b.Property<DateTime?>("ReportReceivedDate");

                    b.Property<string>("ReportedBy");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("DataFormId");

                    b.HasIndex("ImpId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.ReportsView", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataCollectorOffice");

                    b.Property<int>("DataFormId");

                    b.Property<string>("District");

                    b.Property<string>("Facility");

                    b.Property<int>("FacilityID");

                    b.Property<string>("Implementer")
                        .HasColumnName("ImpAcronym");

                    b.Property<string>("Province");

                    b.Property<DateTime?>("ReportPreparedDate");

                    b.Property<DateTime?>("ReportReceivedDate");

                    b.Property<string>("ReportedBy");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("DataFormId");

                    b.ToTable("vReports");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataFormId");

                    b.Property<string>("Description");

                    b.Property<int>("SortOrder");

                    b.Property<byte>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DataFormId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.TextValue", b =>
                {
                    b.Property<long>("FieldId");

                    b.Property<string>("ReportId");

                    b.Property<string>("Data");

                    b.HasKey("FieldId", "ReportId");

                    b.ToTable("TextValues");
                });

            modelBuilder.Entity("DataSystem.Models.HMISIndicatorValues", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("denom");

                    b.Property<int>("facilityId");

                    b.Property<int>("facilityTypeId");

                    b.Property<string>("grantId");

                    b.Property<string>("implementer");

                    b.Property<int>("indicatorId");

                    b.Property<int>("month");

                    b.Property<int>("num");

                    b.Property<string>("program");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("uploadDate");

                    b.Property<string>("userName");

                    b.Property<int>("year");

                    b.HasKey("id");

                    b.ToTable("HMISIndicatorValues");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpCapacityBuilding", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("hpmId");

                    b.Property<int>("monitoringId");

                    b.Property<string>("remarks");

                    b.Property<int>("responseId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("HpCapacityBuilding");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpCbnpKits", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("hpmId");

                    b.Property<int>("monitoringId");

                    b.Property<string>("remarks");

                    b.Property<int>("responseId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("HpCbnpKits");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpCommunityNutritionPlan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("hpmId");

                    b.Property<int>("monitoringId");

                    b.Property<string>("remarks");

                    b.Property<int>("responseId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("HpCommunityNutritionPlan");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpMonitoring", b =>
                {
                    b.Property<int>("HpmId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataCollectorName")
                        .IsRequired();

                    b.Property<DateTime>("DateOfMonitoring");

                    b.Property<string>("DistrictId")
                        .IsRequired();

                    b.Property<int>("FacilityId");

                    b.Property<int>("FacilityTypeId");

                    b.Property<string>("HPCode");

                    b.Property<string>("HPName")
                        .IsRequired();

                    b.Property<int>("ImpId");

                    b.Property<int>("OtherImpId");

                    b.Property<string>("ProvinceId")
                        .IsRequired();

                    b.Property<string>("RespondentContactNo");

                    b.Property<string>("RespondentName")
                        .IsRequired();

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("HpmId");

                    b.ToTable("HpMonitoring");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpMonitoringlkp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PartCode")
                        .IsRequired();

                    b.Property<string>("PossibleReponse");

                    b.Property<string>("Questionname")
                        .IsRequired();

                    b.Property<string>("Section")
                        .IsRequired();

                    b.Property<string>("VerificationSource");

                    b.HasKey("Id");

                    b.ToTable("HpMonitoringlkp");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpRecommendations", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("contributingPersonUnit");

                    b.Property<DateTime?>("dateOfCompletion");

                    b.Property<DateTime?>("deadline");

                    b.Property<int>("hpmId");

                    b.Property<string>("keyFindings");

                    b.Property<int>("monitoringId");

                    b.Property<string>("recommendationStatus");

                    b.Property<string>("remarks");

                    b.Property<string>("responsiblePersonUnit");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("HpRecommendations");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpResponses", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("ResponseName")
                        .IsRequired();

                    b.HasKey("ResponseId");

                    b.ToTable("HpResponses");
                });

            modelBuilder.Entity("DataSystem.Models.HP.HpScreening", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("hpmId");

                    b.Property<int>("monitoringId");

                    b.Property<string>("remarks");

                    b.Property<int>("responseId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("HpScreening");
                });

            modelBuilder.Entity("DataSystem.Models.HP.vHpMonitoring", b =>
                {
                    b.Property<int>("HpmId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataCollectorName");

                    b.Property<DateTime>("DateOfMonitoring");

                    b.Property<string>("District");

                    b.Property<int>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HPCode");

                    b.Property<string>("HPName");

                    b.Property<string>("Implementer");

                    b.Property<string>("Province");

                    b.Property<string>("RespondentContactNo");

                    b.Property<string>("RespondentName");

                    b.Property<int>("TenantId");

                    b.Property<string>("UserName");

                    b.HasKey("HpmId");

                    b.ToTable("vHpMonitoring");
                });

            modelBuilder.Entity("DataSystem.Models.Implementers", b =>
                {
                    b.Property<int>("ImpCode");

                    b.Property<string>("AfghanistanAddress");

                    b.Property<string>("ImpAcronym")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ImpName")
                        .HasMaxLength(255);

                    b.Property<string>("ImpNameDari")
                        .HasMaxLength(255);

                    b.Property<string>("ImpNamePashto")
                        .HasMaxLength(255);

                    b.Property<bool?>("ImpStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("impStatus")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("IsScm");

                    b.Property<string>("OtherAddress");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("ImpCode")
                        .HasName("Implementers$PrimaryKey");

                    b.HasIndex("ImpAcronym")
                        .HasName("Implementers$UNOPSCode");

                    b.HasIndex("ImpName")
                        .HasName("Implementers$MRRD_Code");

                    b.ToTable("Implementers");
                });

            modelBuilder.Entity("DataSystem.Models.LkpCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(200);

                    b.HasKey("CategoryId")
                        .HasName("PK_LkpCategory");

                    b.ToTable("LkpCategory");
                });

            modelBuilder.Entity("DataSystem.Models.LkpDisaggregation", b =>
                {
                    b.Property<int>("DisaggregId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DisaggregId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Disaggregation")
                        .HasMaxLength(250);

                    b.Property<int>("Ordno")
                        .HasColumnName("Ordno");

                    b.HasKey("DisaggregId")
                        .HasName("PK_LkpDisaggregation");

                    b.HasIndex("CategoryId");

                    b.ToTable("LkpDisaggregation");
                });

            modelBuilder.Entity("DataSystem.Models.LkpHfstatus", b =>
                {
                    b.Property<int>("HfactiveStatusId")
                        .HasColumnName("HFActiveStatusID");

                    b.Property<string>("HfstatusDescription")
                        .HasColumnName("HFStatusDescription")
                        .HasMaxLength(50);

                    b.HasKey("HfactiveStatusId")
                        .HasName("PK_lkpHFStatus");

                    b.ToTable("lkpHFStatus");
                });

            modelBuilder.Entity("DataSystem.Models.Mamreq", b =>
                {
                    b.Property<long>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Bhc");

                    b.Property<short>("Chc")
                        .HasColumnName("CHC");

                    b.Property<short>("Dh")
                        .HasColumnName("DH");

                    b.Property<string>("ImpCode");

                    b.Property<short>("Mht")
                        .HasColumnName("MHT");

                    b.Property<short>("Month");

                    b.Property<short>("Ph")
                        .HasColumnName("PH");

                    b.Property<string>("ProvCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ReqBy")
                        .HasMaxLength(50);

                    b.Property<short?>("ReqMonth");

                    b.Property<int?>("ReqYear");

                    b.Property<short>("Shc")
                        .HasColumnName("SHC");

                    b.Property<int>("Tenant");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.HasKey("Rid")
                        .HasName("PK_MAMReq");

                    b.HasIndex("ProvCode", "ImpCode", "Year", "Month")
                        .IsUnique()
                        .HasName("UQ__MAMReq__98EDC49B9F16E08E")
                        .HasFilter("[ProvCode] IS NOT NULL AND [ImpCode] IS NOT NULL");

                    b.ToTable("MAMReq");
                });

            modelBuilder.Entity("DataSystem.Models.MamreqDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Adjustment");

                    b.Property<string>("AdjustmentComment")
                        .HasMaxLength(255);

                    b.Property<int?>("CurrentBalance");

                    b.Property<string>("FormName");

                    b.Property<int?>("NoOfBenificiaries");

                    b.Property<long>("Rid")
                        .HasColumnName("RID");

                    b.Property<int>("SupplyId");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.HasIndex("Rid", "SupplyId", "FormName")
                        .IsUnique()
                        .HasName("UQ__MAMReqDe__3D3297F9B5B94ECB")
                        .HasFilter("[FormName] IS NOT NULL");

                    b.ToTable("MAMReqDetails");
                });

            modelBuilder.Entity("DataSystem.Models.Nmr", b =>
                {
                    b.Property<string>("Nmrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<int?>("BoysScreened");

                    b.Property<string>("Commen")
                        .HasColumnName("commen");

                    b.Property<int>("FacilityId")
                        .HasColumnName("FacilityID");

                    b.Property<int?>("FacilityType");

                    b.Property<int?>("Flanumber")
                        .HasColumnName("FLANumber");

                    b.Property<int?>("GirlsScreened");

                    b.Property<int?>("HfactiveStatusId")
                        .HasColumnName("HFActiveStatusID");

                    b.Property<double?>("IalsKwashiorkor")
                        .HasColumnName("IALS_Kwashiorkor");

                    b.Property<double?>("IalsMarasmus")
                        .HasColumnName("IALS_Marasmus");

                    b.Property<double?>("IawgKwashiorkor")
                        .HasColumnName("IAWG_Kwashiorkor");

                    b.Property<double?>("IawgMarasmus")
                        .HasColumnName("IAWG_Marasmus");

                    b.Property<string>("Implementer")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("IpdAdmissionsByChws");

                    b.Property<int?>("IpdRutfstockOutWeeks");

                    b.Property<int?>("MamAddminsionByChws");

                    b.Property<int?>("MamRusfstockoutWeeks");

                    b.Property<int>("Month");

                    b.Property<double?>("OalsKwashiorkor")
                        .HasColumnName("OALS_Kwashiorkor");

                    b.Property<double?>("OalsMarasmus")
                        .HasColumnName("OALS_Marasmus");

                    b.Property<double?>("OawgKwashiorkor")
                        .HasColumnName("OAWG_Kwashiorkor");

                    b.Property<double?>("OawgMarasmus")
                        .HasColumnName("OAWG_Marasmus");

                    b.Property<int?>("OpdAdmissionsByChws");

                    b.Property<int?>("OpdRutfstockOutWeeks");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Plwreported");

                    b.Property<string>("PreparedBy")
                        .HasMaxLength(255);

                    b.Property<double?>("SfpAls")
                        .HasColumnName("SFP_ALS");

                    b.Property<double?>("SfpAwg")
                        .HasColumnName("SFP_AWG");

                    b.Property<int?>("StatusId")
                        .HasColumnName("StatusID");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.Property<bool>("isHumanitarian");

                    b.Property<int>("mMonth");

                    b.Property<int>("mYear");

                    b.Property<string>("message");

                    b.HasKey("Nmrid");

                    b.HasIndex("FacilityId")
                        .HasName("NutritionMonthlyReport$FacilityInfoNutritionMonthlyReport");

                    b.HasIndex("HfactiveStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("NMR");
                });

            modelBuilder.Entity("DataSystem.Models.Notehelpers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormName");

                    b.Property<string>("SectionCode");

                    b.Property<string>("SectionName");

                    b.Property<string>("Tip");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Notehelper");
                });

            modelBuilder.Entity("DataSystem.Models.Provinces", b =>
                {
                    b.Property<string>("ProvCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<int?>("AGHCHOCode");

                    b.Property<int?>("AIMSCode");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ProvName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ProveNameDari")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProveNamePashto")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ProvCode")
                        .HasName("Provinces$PrimaryKey");

                    b.HasIndex("ProvName")
                        .IsUnique()
                        .HasName("Provinces$ProvName");

                    b.HasIndex("ProveNameDari")
                        .IsUnique()
                        .HasName("Provinces$ProveNameDari");

                    b.HasIndex("ProveNamePashto")
                        .IsUnique()
                        .HasName("Provinces$ProveNamePashtu");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.Lkpwhlevels", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelDescriptoin");

                    b.HasKey("LevelId");

                    b.ToTable("Lkpwhlevels");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.TempRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdjComment");

                    b.Property<int>("Adjustment");

                    b.Property<double>("Buffer");

                    b.Property<int>("Children");

                    b.Property<int>("CurrentBalance");

                    b.Property<int>("FacilityId");

                    b.Property<int>("FacilityTypeId");

                    b.Property<double>("Factor");

                    b.Property<int>("Month");

                    b.Property<string>("Program");

                    b.Property<int>("RequestId");

                    b.Property<int>("StockForChildren");

                    b.Property<int>("SupplyId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("TempRequest");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.rptIPStockmovement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("consignee");

                    b.Property<string>("implementer");

                    b.Property<int>("tenantId");

                    b.HasKey("id");

                    b.ToTable("rptIPStockmovement");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.rptIPStockmovementdetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("batchNumber");

                    b.Property<double>("damage");

                    b.Property<DateTime>("dateFrom");

                    b.Property<DateTime>("dateTo");

                    b.Property<double>("dispatch");

                    b.Property<int>("distributionId");

                    b.Property<double>("expiration");

                    b.Property<DateTime>("expiryDate");

                    b.Property<string>("implementer");

                    b.Property<DateTime>("issueDate");

                    b.Property<string>("item");

                    b.Property<string>("location");

                    b.Property<double>("loss");

                    b.Property<int>("quantity");

                    b.Property<int>("rndId");

                    b.Property<string>("roundId");

                    b.Property<int>("tenantId");

                    b.Property<double>("totalWaste");

                    b.Property<int>("whId");

                    b.HasKey("id");

                    b.ToTable("rptIPStockmovementdetails");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmAveragelevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("averagelevelId");

                    b.Property<bool>("isActive");

                    b.HasKey("id");

                    b.ToTable("scmAveragelevel");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmContacts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("phone1");

                    b.Property<string>("phone2");

                    b.Property<string>("position");

                    b.Property<int>("requestId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmContacts");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmDistributionFacilities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("approve");

                    b.Property<double>("distribution");

                    b.Property<DateTime?>("distributionDate");

                    b.Property<double?>("distributionb");

                    b.Property<DateTime?>("distributionbDate");

                    b.Property<int>("estimation");

                    b.Property<int>("facilityId");

                    b.Property<int>("facilityTypeId");

                    b.Property<int>("ipdistributionId");

                    b.Property<string>("program");

                    b.Property<int>("supplyId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmDistributionFacilities");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmDistributionMain", b =>
                {
                    b.Property<int>("DistributionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DistributionDate");

                    b.Property<int>("ImpId");

                    b.Property<string>("ProvinceId");

                    b.Property<string>("ReceiverUser");

                    b.Property<int>("RoundId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("DistributionId");

                    b.ToTable("scmDistributionMain");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmDistributionsIP", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("batchNumber")
                        .IsRequired();

                    b.Property<int?>("distributionId");

                    b.Property<string>("issueBy")
                        .IsRequired();

                    b.Property<DateTime>("issueDate");

                    b.Property<string>("issueTo")
                        .IsRequired();

                    b.Property<int>("quantity");

                    b.Property<int>("stockId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.Property<int>("whId");

                    b.HasKey("id");

                    b.ToTable("scmDistributionsIP");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmDocs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateSent");

                    b.Property<int>("distributionId");

                    b.Property<string>("documentName");

                    b.Property<string>("message");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmDocs");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmDoctypes", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentType");

                    b.HasKey("DocId");

                    b.ToTable("scmDoctypes");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmEmail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateSent");

                    b.Property<int>("distributionId");

                    b.Property<string>("emailFrom");

                    b.Property<string>("emailToEmail");

                    b.Property<string>("emailToUser");

                    b.Property<string>("message");

                    b.HasKey("id");

                    b.ToTable("scmEmail");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmEstNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("completed");

                    b.Property<DateTime?>("datesubmitted");

                    b.Property<int>("email");

                    b.Property<int>("impId");

                    b.Property<int>("inappnotification");

                    b.Property<bool?>("isontime");

                    b.Property<int?>("notifyId");

                    b.Property<string>("provinceId");

                    b.Property<int>("sms");

                    b.Property<int>("submissionId");

                    b.HasKey("id");

                    b.HasIndex("notifyId");

                    b.ToTable("scmEstNotification");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmEstsubmission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("completed");

                    b.Property<DateTime?>("datecompleted");

                    b.Property<DateTime>("deadlineDate");

                    b.Property<string>("emailmessage");

                    b.Property<int>("roundId");

                    b.Property<DateTime>("startDate");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmEstsubmission");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmHFReqDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Esttype");

                    b.Property<string>("adjComment");

                    b.Property<int?>("adjustment");

                    b.Property<string>("approved");

                    b.Property<double?>("buffer");

                    b.Property<int>("children");

                    b.Property<int?>("currentBalance");

                    b.Property<int>("facilityId");

                    b.Property<int>("facilityTypeId");

                    b.Property<string>("program");

                    b.Property<int>("requestId");

                    b.Property<int?>("stockForChildren");

                    b.Property<int>("supplyId");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.HasIndex("supplyId");

                    b.ToTable("scmHFReqDetails");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmHFRequest", b =>
                {
                    b.Property<int>("HFReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacilityId");

                    b.Property<int>("FacilityTypeId");

                    b.Property<int>("RequestId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("HFReportId");

                    b.HasIndex("FacilityId");

                    b.ToTable("ScmHFRequest");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmHFsAcknowledgement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("acknowledge");

                    b.Property<string>("acknowledgeBy");

                    b.Property<DateTime?>("dateOfAcknoledge");

                    b.Property<int>("distributionId");

                    b.Property<int>("facilityId");

                    b.Property<string>("message");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.Property<string>("waybillNumber");

                    b.HasKey("id");

                    b.ToTable("scmHFsAcknowledgement");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmIPAcknowledgement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("acknowledge");

                    b.Property<string>("acknowledgeBy");

                    b.Property<DateTime?>("dateOfAcknoledge");

                    b.Property<int>("distributionId");

                    b.Property<string>("message");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmIPAcknowledgement");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmIPRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("adjustment");

                    b.Property<string>("adjustmentReason");

                    b.Property<bool?>("approveByPnd");

                    b.Property<bool?>("approveByUnicef");

                    b.Property<int?>("children");

                    b.Property<string>("commentByIp");

                    b.Property<string>("commentByPnd");

                    b.Property<string>("commentByUnicef");

                    b.Property<int?>("currentBalance");

                    b.Property<int?>("emergency");

                    b.Property<string>("emergencyReason");

                    b.Property<string>("pndInchargeId");

                    b.Property<string>("pndUserId");

                    b.Property<string>("program");

                    b.Property<int>("requestId");

                    b.Property<int?>("stockForChildren");

                    b.Property<int>("supplyId");

                    b.Property<int>("tenantId");

                    b.Property<string>("unicefInchargeId");

                    b.Property<string>("unicefUserId");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.Property<double?>("winterization");

                    b.HasKey("id");

                    b.ToTable("scmIPRequest");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmMonths", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonthName");

                    b.HasKey("MonthId");

                    b.ToTable("scmMonths");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmNotificationlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImpId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("ProvinceId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("scmNotificationlist");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmPOC", b =>
                {
                    b.Property<int>("PocId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictId");

                    b.Property<int>("FacilityId");

                    b.Property<int>("FacilityTypeId");

                    b.Property<string>("ProvinceId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("PocId");

                    b.ToTable("scmPOC");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRecalldisposal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateOfDisposal");

                    b.Property<DateTime?>("dateOfRecall");

                    b.Property<int>("ipdistributionId");

                    b.Property<string>("placeDisposal");

                    b.Property<double?>("quantity");

                    b.Property<string>("remarks");

                    b.Property<int>("tenantId");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.Property<int>("wasteId");

                    b.Property<int>("whId");

                    b.HasKey("id");

                    b.ToTable("scmRecalldisposal");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRegions", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionLong")
                        .IsRequired();

                    b.Property<string>("RegionShort")
                        .IsRequired();

                    b.HasKey("RegionId");

                    b.ToTable("scmRegions");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRequest", b =>
                {
                    b.Property<int>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TimeEnd");

                    b.Property<int>("TimeStart");

                    b.Property<int>("endMonth");

                    b.Property<int>("endYear");

                    b.Property<int>("impId");

                    b.Property<string>("provinceId")
                        .IsRequired();

                    b.Property<string>("requestBy")
                        .IsRequired();

                    b.Property<DateTime>("requestDate");

                    b.Property<int>("requestPeriod");

                    b.Property<int>("startMonth");

                    b.Property<int>("startYear");

                    b.Property<int>("tenantId");

                    b.Property<string>("typeOfRequest");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.Property<int>("yearOfRequest");

                    b.HasKey("requestId");

                    b.ToTable("scmRequest");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRequestReason", b =>
                {
                    b.Property<int>("reasonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("reasonName");

                    b.HasKey("reasonId");

                    b.ToTable("scmRequestReason");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRequeststage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("confirmed");

                    b.Property<bool?>("finalizeandemail");

                    b.Property<string>("remarks");

                    b.Property<int?>("requestId");

                    b.Property<int>("statusId");

                    b.Property<DateTime?>("statusUpdateDate");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmRequeststage");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRequeststatus", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateCompleted");

                    b.Property<bool?>("distributionCompleted");

                    b.Property<bool?>("finalizeandemail");

                    b.Property<string>("remarks");

                    b.Property<int>("requestId");

                    b.Property<bool?>("requestOntime");

                    b.Property<bool?>("requestViewed");

                    b.Property<bool?>("revievedByPnd");

                    b.Property<bool?>("reviewedByUnicef");

                    b.Property<int>("tenantId");

                    b.Property<DateTime>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("statusId");

                    b.ToTable("scmRequeststatus");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRequeststatusitems", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isActive");

                    b.Property<string>("statusName");

                    b.HasKey("id");

                    b.ToTable("scmRequeststatusitems");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRequesttype", b =>
                {
                    b.Property<int>("RequesttypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Requesttypename");

                    b.HasKey("RequesttypeId");

                    b.ToTable("scmRequesttype");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmRounds", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive");

                    b.Property<int>("MonthFrom");

                    b.Property<int>("MonthTo");

                    b.Property<DateTime>("PeriodFrom");

                    b.Property<DateTime>("PeriodTo");

                    b.Property<int>("RequesttypeId");

                    b.Property<string>("RoundCode")
                        .IsRequired();

                    b.Property<string>("RoundDescription");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("YearFrom");

                    b.Property<int>("YearTo");

                    b.HasKey("RoundId");

                    b.ToTable("scmRounds");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmStockBalance", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Balance");

                    b.Property<string>("BatchNumber")
                        .IsRequired();

                    b.Property<int?>("Distributions");

                    b.Property<string>("ImpAcronym");

                    b.Property<string>("Item")
                        .IsRequired();

                    b.Property<int>("ItemId");

                    b.Property<string>("ProvName")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<string>("RegionLong")
                        .IsRequired();

                    b.Property<string>("StockItem");

                    b.HasKey("StockId");

                    b.ToTable("scmStockBalance");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmStockaverage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("facilityTypeId");

                    b.Property<string>("program");

                    b.Property<int>("supplyId");

                    b.Property<int>("totalNeeds");

                    b.Property<string>("type");

                    b.Property<int>("year");

                    b.HasKey("id");

                    b.ToTable("scmStockaverage");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmStocks", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .IsRequired();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateReceived");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<int>("ItemId");

                    b.Property<int>("Quantity");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("WhId");

                    b.HasKey("StockId");

                    b.HasIndex("ItemId");

                    b.HasIndex("WhId");

                    b.ToTable("scmStocks");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmTransfers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ipdistributionId");

                    b.Property<int?>("quantitiy");

                    b.Property<string>("remarks");

                    b.Property<int>("tenantId");

                    b.Property<DateTime?>("transferDate");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.Property<int>("whId");

                    b.HasKey("id");

                    b.ToTable("scmTransfers");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmUsersset", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("ImpAcronym");

                    b.Property<int>("IsUnicefPnd");

                    b.Property<string>("RoleName");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("scmUsersset");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmWarehouses", b =>
                {
                    b.Property<int>("WhId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ImpId");

                    b.Property<int>("LevelId");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("ProvinceId")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<string>("WarehouseName");

                    b.HasKey("WhId");

                    b.HasIndex("ImpId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("scmWarehouses");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmWastages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionTaken");

                    b.Property<DateTime>("DateWasted");

                    b.Property<int>("IPDistributionId");

                    b.Property<double?>("Quantity");

                    b.Property<string>("Reason");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("WasteId");

                    b.HasKey("Id");

                    b.ToTable("scmWastages");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmWasteTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("scmWasteTypes");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmdashdistmain", b =>
                {
                    b.Property<int>("DistributionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("ID");

                    b.Property<string>("IP");

                    b.Property<DateTime>("IssueDate");

                    b.Property<string>("Item");

                    b.Property<string>("Location");

                    b.Property<int>("Quantity");

                    b.HasKey("DistributionId");

                    b.ToTable("scmdashdistmain");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmdashrequest", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Adjustment");

                    b.Property<int>("Ballance");

                    b.Property<double>("BufferStock");

                    b.Property<int>("Children");

                    b.Property<int>("EndMonth");

                    b.Property<int>("EndYear");

                    b.Property<string>("Item");

                    b.Property<int>("NewStock");

                    b.Property<string>("Program");

                    b.Property<int>("RequestId");

                    b.Property<int>("StartMonth");

                    b.Property<int>("StartYear");

                    b.Property<double?>("Total");

                    b.Property<string>("Tracker");

                    b.Property<string>("Type");

                    b.Property<int>("YearOfRequest");

                    b.HasKey("ID");

                    b.ToTable("scmdashrequest");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmdashrequestip", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("adjustment");

                    b.Property<int>("ballance");

                    b.Property<int>("children");

                    b.Property<int>("endMonth");

                    b.Property<int>("endYear");

                    b.Property<string>("ip");

                    b.Property<string>("item");

                    b.Property<int>("newStock");

                    b.Property<string>("program");

                    b.Property<int>("requestId");

                    b.Property<int>("startMonth");

                    b.Property<int>("startYear");

                    b.Property<int>("total");

                    b.Property<string>("type");

                    b.Property<int>("yearOfRequest");

                    b.HasKey("id");

                    b.ToTable("scmdashrequest_ip");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmdashsubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed");

                    b.Property<DateTime?>("Datecompleted");

                    b.Property<DateTime>("DeadlineDate");

                    b.Property<string>("Emailmessage");

                    b.Property<string>("ImpAcronym");

                    b.Property<string>("ProvName");

                    b.Property<string>("Quarter");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("email");

                    b.HasKey("Id");

                    b.ToTable("scmdashsubmission");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmipRequestConfirmation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("emailMessage");

                    b.Property<bool>("isSubmitted");

                    b.Property<int>("reasonId");

                    b.Property<int>("requestId");

                    b.Property<bool?>("sendEmail");

                    b.Property<DateTime?>("submissionDate");

                    b.Property<int>("tenantId");

                    b.Property<DateTime?>("updateDate");

                    b.Property<string>("userName");

                    b.HasKey("id");

                    b.ToTable("scmipRequestConfirmation");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmmailgroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bccemails");

                    b.Property<string>("ccemails");

                    b.Property<bool>("isactive");

                    b.Property<string>("toemails");

                    b.HasKey("id");

                    b.ToTable("scmmailgroup");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmrptRequestpivot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdjComment");

                    b.Property<int?>("Adjustment");

                    b.Property<double>("Buffer");

                    b.Property<int?>("Children");

                    b.Property<int?>("CurrentBalance");

                    b.Property<string>("District");

                    b.Property<string>("Esttype");

                    b.Property<int>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<int>("FacilityTypeId");

                    b.Property<string>("Item");

                    b.Property<string>("Program");

                    b.Property<int>("RequestId");

                    b.Property<int>("RequesttypeId");

                    b.Property<int?>("StockForChildren");

                    b.Property<int>("SupplyId");

                    b.Property<int?>("TotalNeeded");

                    b.Property<string>("TypeAbbrv");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("scmrptRequestpivot");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vmEstNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DeadlineDate");

                    b.Property<string>("Email");

                    b.Property<string>("Emailmessage");

                    b.Property<string>("Implementer");

                    b.Property<string>("Province");

                    b.Property<string>("RoundDescription");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("vmEstNotification");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmDistributiontransfer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("batchNumber");

                    b.Property<string>("issueBy");

                    b.Property<DateTime?>("issueDate");

                    b.Property<string>("issueTo");

                    b.Property<string>("item");

                    b.Property<DateTime?>("periodFrom");

                    b.Property<DateTime?>("periodTo");

                    b.Property<int>("quantity");

                    b.Property<string>("roundCode");

                    b.Property<string>("roundDescription");

                    b.Property<int>("tenantId");

                    b.Property<string>("warehouseName");

                    b.HasKey("id");

                    b.ToTable("vscmDistributiontransfer");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmRequestList", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfRequest");

                    b.Property<string>("Implementer");

                    b.Property<DateTime?>("PeriodFrom");

                    b.Property<string>("PeriodName");

                    b.Property<DateTime?>("PeriodTo");

                    b.Property<string>("Province");

                    b.Property<string>("RequestBy");

                    b.Property<string>("Requesttype");

                    b.Property<string>("UserName");

                    b.Property<string>("Yearmonthfrom");

                    b.Property<string>("Yearmonthto");

                    b.HasKey("RequestId");

                    b.ToTable("vscmRequestList");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmRequeststatus", b =>
                {
                    b.Property<int>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Implementer");

                    b.Property<string>("Province");

                    b.Property<string>("RoundCode");

                    b.Property<DateTime?>("dateCompleted");

                    b.Property<bool?>("distributionCompleted");

                    b.Property<string>("remarks");

                    b.Property<bool?>("requestOntime");

                    b.Property<bool?>("requestViewed");

                    b.Property<bool?>("revievedByPnd");

                    b.Property<bool?>("reviewedByUnicef");

                    b.HasKey("requestId");

                    b.ToTable("vscmRequeststatus");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmRounds", b =>
                {
                    b.Property<int>("roundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("periodFrom");

                    b.Property<DateTime>("periodTo");

                    b.Property<string>("roundCode");

                    b.Property<string>("roundDescription");

                    b.HasKey("roundId");

                    b.ToTable("vscmRounds");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmiprequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("adjustment");

                    b.Property<string>("adjustmentReason");

                    b.Property<int?>("children");

                    b.Property<int>("currentBalance");

                    b.Property<int?>("emergency");

                    b.Property<string>("emergencyReason");

                    b.Property<float?>("ipdsamFactor");

                    b.Property<string>("item");

                    b.Property<float?>("opdsamFactor");

                    b.Property<string>("program");

                    b.Property<int>("requestId");

                    b.Property<float?>("totalBuffer");

                    b.Property<int?>("totalEstimation");

                    b.Property<float?>("totalRequest");

                    b.HasKey("id");

                    b.ToTable("vscmiprequest");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmrequests", b =>
                {
                    b.Property<int>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("endMonth");

                    b.Property<int>("endYear");

                    b.Property<string>("implementer");

                    b.Property<string>("province");

                    b.Property<string>("requestType");

                    b.Property<int>("startMonth");

                    b.Property<int>("startYear");

                    b.HasKey("requestId");

                    b.ToTable("vscmrequests");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.vscmstockwastages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<string>("Implementer");

                    b.Property<string>("Province");

                    b.Property<double>("Quantity");

                    b.Property<string>("Quarter");

                    b.Property<int>("StockId");

                    b.Property<string>("StockItem");

                    b.Property<string>("WateType");

                    b.HasKey("Id");

                    b.ToTable("vscmstockwastages");
                });

            modelBuilder.Entity("DataSystem.Models.Samreq", b =>
                {
                    b.Property<long>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Bhc");

                    b.Property<short>("Chc")
                        .HasColumnName("CHC");

                    b.Property<short>("Dh")
                        .HasColumnName("DH");

                    b.Property<string>("ImpCode")
                        .IsRequired();

                    b.Property<short>("Mht")
                        .HasColumnName("MHT");

                    b.Property<short>("Month");

                    b.Property<short?>("MonthFrom");

                    b.Property<short?>("MonthTo");

                    b.Property<short>("Ph")
                        .HasColumnName("PH");

                    b.Property<string>("ProvCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ReqBy")
                        .HasMaxLength(50);

                    b.Property<short>("Shc")
                        .HasColumnName("SHC");

                    b.Property<int>("Tenant");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.Property<short?>("YearFrom");

                    b.Property<short?>("YearTo");

                    b.HasKey("Rid")
                        .HasName("PK_SAMReq");

                    b.HasIndex("ProvCode", "ImpCode", "Year", "Month")
                        .IsUnique()
                        .HasName("UQ__SAMReq__E61DE2A759B61604");

                    b.ToTable("SAMReq");
                });

            modelBuilder.Entity("DataSystem.Models.SamreqDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Adjustment");

                    b.Property<string>("AdjustmentComment")
                        .HasMaxLength(255);

                    b.Property<int?>("CurrentBalance");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("O6");

                    b.Property<long>("Rid")
                        .HasColumnName("RID");

                    b.Property<int>("SupplyId");

                    b.Property<int?>("U6");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.HasIndex("Rid", "SupplyId", "FormName")
                        .IsUnique()
                        .HasName("UQ__SAMReqDe__12B320735C79634D");

                    b.ToTable("SAMReqDetails");
                });

            modelBuilder.Entity("DataSystem.Models.SurveyInfo", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abstract");

                    b.Property<string>("Attachment");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<string>("FileType");

                    b.Property<string>("ImpBy");

                    b.Property<string>("LeadBy")
                        .IsRequired();

                    b.Property<int?>("Month");

                    b.Property<string>("SurveyAccro")
                        .IsRequired();

                    b.Property<string>("SurveyFull")
                        .IsRequired();

                    b.Property<int>("SurveyYear");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<string>("Writers");

                    b.HasKey("SurveyId");

                    b.ToTable("SurveyInfo");
                });

            modelBuilder.Entity("DataSystem.Models.SurveyResults", b =>
                {
                    b.Property<int>("IndResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CINational");

                    b.Property<int>("CategoryId");

                    b.Property<int>("DisaggregId");

                    b.Property<int>("IndicatorId");

                    b.Property<double?>("IndicatorValue");

                    b.Property<int?>("Month");

                    b.Property<string>("Remarks");

                    b.Property<int>("SurveyId");

                    b.Property<int>("TenantId");

                    b.Property<int>("ThemeId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.HasKey("IndResultId");

                    b.HasIndex("DisaggregId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("ThemeId");

                    b.ToTable("SurveyResults");
                });

            modelBuilder.Entity("DataSystem.Models.TblFeedback", b =>
                {
                    b.Property<int>("FedId")
                        .HasColumnName("FedID");

                    b.Property<string>("Comments");

                    b.Property<int?>("FormId")
                        .HasColumnName("FormID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.HasKey("FedId")
                        .HasName("PK_tblFeedback");

                    b.HasIndex("FormId");

                    b.HasIndex("Nmrid");

                    b.ToTable("tblFeedback");
                });

            modelBuilder.Entity("DataSystem.Models.TblFstock", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnName("stockID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<int?>("ExpectedRecepients");

                    b.Property<int?>("Losses");

                    b.Property<int?>("OpeningBalance");

                    b.Property<int?>("QuantityDistributed");

                    b.Property<int?>("QuantityReceived");

                    b.Property<int?>("QuantityReferin");

                    b.Property<int?>("QuantityReturned");

                    b.Property<int?>("QuantityTransferred");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("StockId", "Nmrid")
                        .HasName("tblFstock$PrimaryKey");

                    b.HasIndex("Nmrid")
                        .HasName("tblFstock$NMRID");

                    b.HasIndex("StockId")
                        .HasName("tblFstock$stockID1");

                    b.ToTable("tblFstock");
                });

            modelBuilder.Entity("DataSystem.Models.TblIycf", b =>
                {
                    b.Property<int>("Iycfid")
                        .HasColumnName("IYCFID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<int?>("Firstvisit");

                    b.Property<int?>("MChild524months")
                        .HasColumnName("mChild524months");

                    b.Property<int?>("MChildU5months")
                        .HasColumnName("mChildU5months");

                    b.Property<int?>("Pregnanatwomen")
                        .HasColumnName("pregnanatwomen");

                    b.Property<int?>("ReferIn");

                    b.Property<int?>("ReferOut");

                    b.Property<int?>("Revisit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Iycfid", "Nmrid")
                        .HasName("tblIYCF$PrimaryKey");

                    b.HasIndex("Iycfid")
                        .HasName("tblIYCF$InputID");

                    b.HasIndex("Nmrid")
                        .HasName("tblIYCF${AC5A7038-0E9D-4C9A-A138-0D220C0EE76E}");

                    b.ToTable("tblIYCF");
                });

            modelBuilder.Entity("DataSystem.Models.TblMam", b =>
                {
                    b.Property<int>("Mamid")
                        .HasColumnName("MAMID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<int?>("Absents");

                    b.Property<int?>("Cured");

                    b.Property<int?>("Deaths");

                    b.Property<int?>("Defaulters");

                    b.Property<int?>("Muac12")
                        .HasColumnName("MUAC12");

                    b.Property<int?>("Muac23")
                        .HasColumnName("MUAC23");

                    b.Property<int?>("NonCured");

                    b.Property<int?>("ReferIn");

                    b.Property<int?>("TFemale")
                        .HasColumnName("tFemale");

                    b.Property<int?>("TMale")
                        .HasColumnName("tMale");

                    b.Property<int?>("Totalbegin")
                        .HasColumnName("totalbegin");

                    b.Property<int?>("Transfers");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<int?>("Zscore23");

                    b.HasKey("Mamid", "Nmrid")
                        .HasName("tblSFP$PrimaryKey");

                    b.HasIndex("Mamid")
                        .HasName("tblSFP$SFPID");

                    b.HasIndex("Nmrid")
                        .HasName("tblSFP$NMRID");

                    b.ToTable("tblMAM");
                });

            modelBuilder.Entity("DataSystem.Models.TblMn", b =>
                {
                    b.Property<int>("Mnid")
                        .HasColumnName("MNID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<int?>("chu2f")
                        .HasColumnName("chu2f");

                    b.Property<int?>("chu2m")
                        .HasColumnName("chu2m");

                    b.Property<int?>("refbyCHW")
                        .HasColumnName("refbyChw");

                    b.HasKey("Mnid", "Nmrid")
                        .HasName("tblMN$PrimaryKey");

                    b.HasIndex("Mnid")
                        .HasName("tblMN${58F5E5B9-3552-4441-8E08-55B12448DD25}");

                    b.HasIndex("Nmrid")
                        .HasName("tblMN$NMRID");

                    b.ToTable("tblMN");
                });

            modelBuilder.Entity("DataSystem.Models.TblOtp", b =>
                {
                    b.Property<int>("Otpid")
                        .HasColumnName("OTPID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<int?>("Cured");

                    b.Property<int?>("Death");

                    b.Property<int?>("Default");

                    b.Property<int?>("Defaultreturn")
                        .HasColumnName("defaultreturn");

                    b.Property<int?>("Fromscotp")
                        .HasColumnName("fromscotp");

                    b.Property<int?>("Fromsfp")
                        .HasColumnName("fromsfp");

                    b.Property<int?>("Muac115")
                        .HasColumnName("MUAC115");

                    b.Property<int?>("NonCured");

                    b.Property<int?>("Odema")
                        .HasColumnName("odema");

                    b.Property<int?>("RefOut");

                    b.Property<int?>("TFemale")
                        .HasColumnName("tFemale");

                    b.Property<int?>("TMale")
                        .HasColumnName("tMale");

                    b.Property<int?>("Totalbegin")
                        .HasColumnName("totalbegin");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<int?>("Z3score")
                        .HasColumnName("z3score");

                    b.HasKey("Otpid", "Nmrid")
                        .HasName("tblOTP$PrimaryKey");

                    b.HasIndex("Nmrid")
                        .HasName("tblOTP$NMRID");

                    b.HasIndex("Otpid")
                        .HasName("tblOTP$SFPID");

                    b.ToTable("tblOTP");
                });

            modelBuilder.Entity("DataSystem.Models.TblOtptfu", b =>
                {
                    b.Property<int>("Otptfuid")
                        .HasColumnName("OTPTFUID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<int?>("Cured");

                    b.Property<int?>("Death");

                    b.Property<int?>("Default");

                    b.Property<int?>("Defaultreturn")
                        .HasColumnName("defaultreturn");

                    b.Property<int?>("Fromscotp")
                        .HasColumnName("fromscotp");

                    b.Property<int?>("Fromsfp")
                        .HasColumnName("fromsfp");

                    b.Property<int?>("Muac115")
                        .HasColumnName("MUAC115");

                    b.Property<int?>("NonCured");

                    b.Property<int?>("Odema")
                        .HasColumnName("odema");

                    b.Property<int?>("RefOut");

                    b.Property<int?>("TFemale")
                        .HasColumnName("tFemale");

                    b.Property<int?>("TMale")
                        .HasColumnName("tMale");

                    b.Property<int?>("Totalbegin")
                        .HasColumnName("totalbegin");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<int?>("Z3score")
                        .HasColumnName("z3score");

                    b.HasKey("Otptfuid", "Nmrid")
                        .HasName("tblOTPTFU$PrimaryKey");

                    b.HasIndex("Nmrid")
                        .HasName("tblOTPTFU$NMRID");

                    b.HasIndex("Otptfuid")
                        .HasName("tblOTPTFU$SFPID");

                    b.ToTable("tblOTPTFU");
                });

            modelBuilder.Entity("DataSystem.Models.TblQnr", b =>
                {
                    b.Property<int>("Qnrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QNRID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Highlights")
                        .HasMaxLength(500);

                    b.Property<int>("Implementer")
                        .HasMaxLength(50);

                    b.Property<string>("IpdsamAdmissionsTrend")
                        .HasColumnName("IPDSAM_AdmissionsTrend")
                        .HasMaxLength(500);

                    b.Property<string>("IpdsamPerformanceTrend")
                        .HasColumnName("IPDSAM_PerformanceTrend")
                        .HasMaxLength(500);

                    b.Property<string>("Iycf")
                        .HasColumnName("IYCF")
                        .HasMaxLength(500);

                    b.Property<string>("Micronutrients")
                        .HasMaxLength(500);

                    b.Property<string>("OpdmamAdmissionsTrend")
                        .HasColumnName("OPDMAM_AdmissionsTrend")
                        .HasMaxLength(500);

                    b.Property<string>("OpdmamPerformanceTrend")
                        .HasColumnName("OPDMAM_PerformanceTrend")
                        .HasMaxLength(500);

                    b.Property<string>("OpdsamAdmissionsTrend")
                        .HasColumnName("OPDSAM_AdmissionsTrend")
                        .HasMaxLength(500);

                    b.Property<string>("OpdsamPerformanceTrend")
                        .HasColumnName("OPDSAM_PerformanceTrend")
                        .HasMaxLength(500);

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<int?>("ReportMonth");

                    b.Property<int?>("ReportYear");

                    b.Property<DateTime?>("ReportingDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusId");

                    b.Property<int>("Tenant");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<string>("message");

                    b.HasKey("Qnrid")
                        .HasName("PK_tblQNR");

                    b.HasIndex("Implementer");

                    b.HasIndex("Province");

                    b.HasIndex("StatusId");

                    b.ToTable("tblQNR");
                });

            modelBuilder.Entity("DataSystem.Models.TblStockIpt", b =>
                {
                    b.Property<int>("SstockId")
                        .HasColumnName("sstockID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Damaged")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("Expired")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("Loss")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("Openingbalance")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("Received");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Used")
                        .HasColumnType("decimal");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("SstockId", "Nmrid")
                        .HasName("tblSstock$PrimaryKey");

                    b.HasIndex("Nmrid")
                        .HasName("tblSstock$NMRID");

                    b.HasIndex("SstockId")
                        .HasName("tblSstock$stockID1");

                    b.ToTable("tblStock_ipt");
                });

            modelBuilder.Entity("DataSystem.Models.TblStockOtp", b =>
                {
                    b.Property<int>("SstockotpId")
                        .HasColumnName("sstockotpID");

                    b.Property<string>("Nmrid")
                        .HasColumnName("NMRID")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Damaged");

                    b.Property<decimal?>("Expired");

                    b.Property<decimal?>("Loss")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("Openingbalance")
                        .HasColumnType("decimal");

                    b.Property<decimal?>("Received");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Used");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("SstockotpId", "Nmrid")
                        .HasName("tblSstock_otp$PrimaryKey");

                    b.HasIndex("Nmrid")
                        .HasName("tblSstock_otp$NMRID");

                    b.HasIndex("SstockotpId")
                        .HasName("tblSstock_otp$stockID1");

                    b.ToTable("tblStock_otp");
                });

            modelBuilder.Entity("DataSystem.Models.TblkpStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(50);

                    b.HasKey("StatusId")
                        .HasName("PK_tblkpStatus");

                    b.ToTable("tblkpStatus");
                });

            modelBuilder.Entity("DataSystem.Models.TempDistPopulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistCode");

                    b.Property<int>("Pop");

                    b.Property<int>("PopYear");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UploadDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("TempDistPopulation");
                });

            modelBuilder.Entity("DataSystem.Models.TempFacilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEstablished");

                    b.Property<string>("DistrictCode");

                    b.Property<int>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityNameDari");

                    b.Property<string>("FacilityNamePashto");

                    b.Property<int?>("FacilityTypeId");

                    b.Property<string>("Implementer");

                    b.Property<string>("IsActive");

                    b.Property<double?>("Latitude");

                    b.Property<string>("Location");

                    b.Property<string>("LocationDari");

                    b.Property<string>("LocationPashto");

                    b.Property<double?>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("TempFacilities");
                });

            modelBuilder.Entity("DataSystem.Models.TemphmisindicatorValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Denom");

                    b.Property<int>("FacilityId");

                    b.Property<int>("FacilityTypeId");

                    b.Property<string>("GrantId");

                    b.Property<string>("Implementer");

                    b.Property<int>("IndicatorId");

                    b.Property<int>("Month");

                    b.Property<int?>("Num");

                    b.Property<string>("Program");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UploadDate");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("TempHMISIndicatorValues");
                });

            modelBuilder.Entity("DataSystem.Models.Tenant", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("PK_tenant");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpForms", b =>
                {
                    b.Property<int>("FormId")
                        .HasColumnName("FormID");

                    b.Property<string>("FormName")
                        .HasMaxLength(100);

                    b.HasKey("FormId")
                        .HasName("PK_tlkpForms");

                    b.ToTable("tlkpForms");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpFstock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stockID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<float>("Buffer");

                    b.Property<decimal?>("DistAmountKg")
                        .HasColumnType("decimal");

                    b.Property<string>("Item")
                        .HasMaxLength(255);

                    b.Property<float>("Zarib");

                    b.HasKey("StockId")
                        .HasName("tlkpFstock$stockID");

                    b.ToTable("tlkpFstock");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpIycf", b =>
                {
                    b.Property<int>("Iycfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IYCFID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("CauseConsultation")
                        .HasColumnName("cause_consultation")
                        .HasMaxLength(255);

                    b.Property<string>("CauseShortName")
                        .HasMaxLength(255);

                    b.HasKey("Iycfid")
                        .HasName("tlkpIYCF$SFPID");

                    b.ToTable("tlkpIYCF");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpMn", b =>
                {
                    b.Property<int>("Mnid")
                        .HasColumnName("MNID");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Mnitems")
                        .HasColumnName("MNitems")
                        .HasMaxLength(255);

                    b.HasKey("Mnid")
                        .HasName("tlkpMN$PrimaryKey");

                    b.ToTable("tlkpMN");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpOtptfu", b =>
                {
                    b.Property<int>("Otptfuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OTPTFUID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("AgeGroup")
                        .HasMaxLength(255);

                    b.HasKey("Otptfuid")
                        .HasName("tlkpOTPTFU$SFPID");

                    b.ToTable("tlkpOTPTFU");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpSfp", b =>
                {
                    b.Property<int>("Sfpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SFPID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("AgeGroup")
                        .HasMaxLength(255);

                    b.HasKey("Sfpid")
                        .HasName("tlkpSFP$SFPID");

                    b.ToTable("tlkpSFP");
                });

            modelBuilder.Entity("DataSystem.Models.TlkpSstock", b =>
                {
                    b.Property<int>("SstockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sstockID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<float>("Buffer");

                    b.Property<string>("Comments");

                    b.Property<float>("IPDSAMZarib");

                    b.Property<string>("Item")
                        .HasMaxLength(255);

                    b.Property<float>("OPDSAMZarib");

                    b.Property<int?>("Persachet");

                    b.HasKey("SstockId")
                        .HasName("tlkpSstock$stockID");

                    b.ToTable("tlkpSstock");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.Export.ImpFilter", b =>
                {
                    b.Property<string>("ImpCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Implementer")
                        .HasColumnName("Implementer");

                    b.HasKey("ImpCode");

                    b.ToTable("vImplementer");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.Export.ProvinceFilter", b =>
                {
                    b.Property<string>("Implementer")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProvCode")
                        .HasColumnName("ProvCode");

                    b.Property<string>("ProvName")
                        .HasColumnName("ProvName");

                    b.HasKey("Implementer");

                    b.ToTable("vProvince");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.Export.YearFilter", b =>
                {
                    b.Property<int>("Facility")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Year2");

                    b.Property<int>("YearFrom")
                        .HasColumnName("YearFrom");

                    b.Property<int>("YearTo")
                        .HasColumnName("YearTo");

                    b.HasKey("Facility");

                    b.ToTable("yFilter");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.Export.Yearlist", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("YearName");

                    b.HasKey("YearId");

                    b.ToTable("Yearlist");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.FormatYear", b =>
                {
                    b.Property<int>("YearFrom")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("YearTo");

                    b.HasKey("YearFrom");

                    b.ToTable("FormatYear");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.Formatmamreport", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Absents");

                    b.Property<int>("Cured");

                    b.Property<int>("Deaths");

                    b.Property<int>("Defaulters");

                    b.Property<string>("DistCode");

                    b.Property<string>("District");

                    b.Property<int>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Implementer");

                    b.Property<int>("MUAC12");

                    b.Property<int>("MUAC23");

                    b.Property<int>("Month");

                    b.Property<int>("NonCured");

                    b.Property<string>("ProvCode");

                    b.Property<string>("Province");

                    b.Property<int>("ReferIn");

                    b.Property<int>("SFPID");

                    b.Property<double>("SFP_ALS");

                    b.Property<double>("SFP_AWG");

                    b.Property<int>("Time");

                    b.Property<int>("Transfers");

                    b.Property<string>("TypeAbbrv");

                    b.Property<int>("Year");

                    b.Property<int>("Zscore23");

                    b.Property<int>("tFemale");

                    b.Property<int>("tMale");

                    b.Property<int>("totalbegin");

                    b.HasKey("NMRID");

                    b.ToTable("Format_mam_report");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.Formatmamstockreport", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DistCode");

                    b.Property<double?>("ExpectedRecepients");

                    b.Property<int>("FacilityId");

                    b.Property<string>("Implementer");

                    b.Property<double?>("Losses");

                    b.Property<int>("Month");

                    b.Property<double?>("OpeningBalance");

                    b.Property<string>("ProvCode");

                    b.Property<string>("Province");

                    b.Property<double?>("QuantityDistributed");

                    b.Property<double?>("QuantityReceived");

                    b.Property<double?>("QuantityReferin");

                    b.Property<double?>("QuantityReturned");

                    b.Property<double?>("QuantityTransferred");

                    b.Property<int>("Time");

                    b.Property<int>("Year");

                    b.Property<int>("stockID");

                    b.HasKey("NMRID");

                    b.ToTable("Format_mamstock_report");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.PivotTable.statReports", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DistCode");

                    b.Property<string>("District");

                    b.Property<int>("FacTypeCode");

                    b.Property<int>("FacilityID");

                    b.Property<string>("FacilityName");

                    b.Property<int>("Month");

                    b.Property<string>("ProvCode");

                    b.Property<string>("Province");

                    b.Property<int>("Quarter");

                    b.Property<string>("TypeAbbrv");

                    b.Property<int>("Year");

                    b.Property<int>("ipdCured");

                    b.Property<int>("ipdDeaths");

                    b.Property<int>("ipdDefaults");

                    b.Property<int>("ipdExists");

                    b.Property<int>("mMonth");

                    b.Property<int>("mQuarter");

                    b.Property<int>("mYear");

                    b.Property<int>("mamPlw");

                    b.Property<int>("mamPlwServices");

                    b.Property<int>("mamU5");

                    b.Property<int>("mamU5Services");

                    b.Property<int>("samAdmitIpd");

                    b.Property<int>("samAdmitIpdFemale");

                    b.Property<int>("samAdmitIpdMale");

                    b.Property<int>("samAdmitOpd");

                    b.Property<int>("samAdmitOpdFemale");

                    b.Property<int>("samAdmitOpdMale");

                    b.Property<int>("samAdmittedFemale");

                    b.Property<int>("samAdmittedMale");

                    b.Property<int>("samAdmittedTotal");

                    b.Property<int>("samCured");

                    b.Property<int>("samDeaths");

                    b.Property<int>("samDefaults");

                    b.Property<int>("samExists");

                    b.Property<int>("withSamIpd");

                    b.Property<int>("withSamOpd");

                    b.Property<int>("withSamServices");

                    b.HasKey("NMRID");

                    b.ToTable("statReports");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.chart.submissionRes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExDistricts");

                    b.Property<int>("ExFaciliteis");

                    b.Property<int>("ExProvinces");

                    b.Property<int>("SubDistricts");

                    b.Property<int>("SubFacilities");

                    b.Property<int>("SubOrgs");

                    b.Property<int>("SubProvinces");

                    b.HasKey("ID");

                    b.ToTable("submissionRes");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.mamcommon", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacilityName");

                    b.Property<string>("ProvCode");

                    b.HasKey("FacilityId");

                    b.ToTable("mam_common");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.vDistImplementers", b =>
                {
                    b.Property<string>("DistCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImpCode");

                    b.Property<string>("Implementer");

                    b.HasKey("DistCode");

                    b.ToTable("vDistImplementers");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.vHFImplementer", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImpCode");

                    b.Property<string>("Implementer");

                    b.HasKey("FacilityId");

                    b.ToTable("vHFImplementer");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.vProvImplementers", b =>
                {
                    b.Property<string>("ProvCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImpCode");

                    b.Property<string>("Implementer");

                    b.HasKey("ProvCode");

                    b.ToTable("vProvImplementers");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.vmamavail", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityType");

                    b.Property<string>("Implementer");

                    b.Property<int>("Month");

                    b.Property<string>("ProvCode");

                    b.Property<int>("Year");

                    b.HasKey("NMRID");

                    b.ToTable("vmamavail");
                });

            modelBuilder.Entity("DataSystem.Models.ViewModels.vsamavail", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FacilityId");

                    b.Property<string>("FacilityType");

                    b.Property<string>("Implementer");

                    b.Property<int>("Month");

                    b.Property<string>("ProvCode");

                    b.Property<int>("Year");

                    b.HasKey("NMRID");

                    b.ToTable("vsamavail");
                });

            modelBuilder.Entity("DataSystem.Models.hmisindicators", b =>
                {
                    b.Property<int>("IndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IndicatorId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IndCaluculation")
                        .HasMaxLength(250);

                    b.Property<string>("IndDataSource")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("IndType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("IndicatorDescription")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("IndicatorId")
                        .HasName("PK_HMISIndicators");

                    b.ToTable("HMISIndicators");
                });

            modelBuilder.Entity("DataSystem.Models.lkpChecklist", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IntId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("DescriptionDari")
                        .HasMaxLength(250);

                    b.Property<int>("OrderId");

                    b.Property<string>("Stringorder")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("IntId")
                        .HasName("PK_lkpChecklist");

                    b.ToTable("lkpChecklist");
                });

            modelBuilder.Entity("DataSystem.Models.lkpSurveyIndicators", b =>
                {
                    b.Property<int>("indicatorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("indicatorName");

                    b.Property<string>("originalIndicatorName");

                    b.HasKey("indicatorId");

                    b.ToTable("lkpSurveyIndicators");
                });

            modelBuilder.Entity("DataSystem.Models.lkpThematicArea", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ThemeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ThematicArea")
                        .HasMaxLength(200);

                    b.HasKey("ThemeId")
                        .HasName("PK_lkpThematicArea");

                    b.ToTable("lkpThematicArea");
                });

            modelBuilder.Entity("DataSystem.Models.masteremails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("emailaccount");

                    b.Property<bool>("isactive");

                    b.Property<bool>("issender");

                    b.Property<int>("port");

                    b.Property<string>("smtp");

                    b.Property<bool>("ssl");

                    b.HasKey("Id");

                    b.ToTable("masteremails");
                });

            modelBuilder.Entity("DataSystem.Models.monthlysubmission", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24);

                    b.Property<string>("District")
                        .HasMaxLength(20);

                    b.Property<int>("FacilityID");

                    b.Property<string>("FacilityName");

                    b.Property<int>("M1");

                    b.Property<int>("M10");

                    b.Property<int>("M11");

                    b.Property<int>("M12");

                    b.Property<int>("M2");

                    b.Property<int>("M3");

                    b.Property<int>("M4");

                    b.Property<int>("M5");

                    b.Property<int>("M6");

                    b.Property<int>("M7");

                    b.Property<int>("M8");

                    b.Property<int>("M9");

                    b.Property<string>("ProvId");

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<int>("Tenant");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.ToTable("monthlysubmission");
                });

            modelBuilder.Entity("DataSystem.Models.provincemonthly", b =>
                {
                    b.Property<string>("ProvId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("M1");

                    b.Property<int>("M10");

                    b.Property<int>("M11");

                    b.Property<int>("M12");

                    b.Property<int>("M2");

                    b.Property<int>("M3");

                    b.Property<int>("M4");

                    b.Property<int>("M5");

                    b.Property<int>("M6");

                    b.Property<int>("M7");

                    b.Property<int>("M8");

                    b.Property<int>("M9");

                    b.Property<string>("Province");

                    b.Property<int>("Year");

                    b.HasKey("ProvId");

                    b.ToTable("provincemonthly");
                });

            modelBuilder.Entity("DataSystem.Models.tlkpEmrIndicators", b =>
                {
                    b.Property<int>("IndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IndicatorId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IndicatorName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Type")
                        .HasColumnName("Type");

                    b.HasKey("IndicatorId")
                        .HasName("PK_lkpIndicators");

                    b.ToTable("tlkpEmrIndicators");
                });

            modelBuilder.Entity("DataSystem.Models.tlkpbiweekly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("tlkpbiweekly");
                });

            modelBuilder.Entity("DataSystem.Models.vmFacilityimps", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityNameDari");

                    b.Property<string>("FacilityNamePashto");

                    b.Property<int>("FacilityTypeId");

                    b.Property<int>("ImpId");

                    b.Property<string>("Implementer");

                    b.Property<double?>("Lat");

                    b.Property<double?>("Lon");

                    b.Property<string>("ProvinceId");

                    b.HasKey("FacilityId");

                    b.ToTable("vmFacilityimps");
                });

            modelBuilder.Entity("DataSystem.Models.vusers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("vusers");
                });

            modelBuilder.Entity("checkcompleteness", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<int>("FacilityID");

                    b.Property<string>("FacilityName");

                    b.Property<int>("IPDSAM_stock_submission");

                    b.Property<int>("IPDSAM_submission");

                    b.Property<string>("Implementer")
                        .HasMaxLength(20);

                    b.Property<int>("MNS_submission");

                    b.Property<int>("Month");

                    b.Property<string>("MyId");

                    b.Property<int>("OPDMAM_stock_submission");

                    b.Property<int>("OPDMAM_submission");

                    b.Property<int>("OPDSAM_stock_submission");

                    b.Property<int>("OPDSAM_submission");

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusId");

                    b.Property<int>("Tenant");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.Property<string>("message")
                        .HasMaxLength(500);

                    b.HasKey("NMRID");

                    b.ToTable("NMR_checkcompleteness");
                });

            modelBuilder.Entity("nmrsubmission", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<int>("FacilityID");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityType");

                    b.Property<int>("IPDSAM_stock_submission");

                    b.Property<int>("IPDSAM_submission");

                    b.Property<string>("Implementer")
                        .HasMaxLength(20);

                    b.Property<int>("MNS_submission");

                    b.Property<int>("Month");

                    b.Property<int>("OPDMAM_stock_submission");

                    b.Property<int>("OPDMAM_submission");

                    b.Property<int>("OPDSAM_stock_submission");

                    b.Property<int>("OPDSAM_submission");

                    b.Property<string>("ProvCode")
                        .HasMaxLength(2);

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.Property<int>("mMonth");

                    b.Property<int>("mYear");

                    b.HasKey("NMRID");

                    b.ToTable("nmrsubmission");
                });

            modelBuilder.Entity("reportsubmission", b =>
                {
                    b.Property<string>("NMRID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DistCode");

                    b.Property<string>("District");

                    b.Property<int>("FacilityID");

                    b.Property<string>("FacilityName");

                    b.Property<int>("IPDSAM_stock_submission");

                    b.Property<int>("IPDSAM_submission");

                    b.Property<string>("Implementer");

                    b.Property<int>("MNS_submission");

                    b.Property<int>("Month");

                    b.Property<int>("OPDMAM_stock_submission");

                    b.Property<int>("OPDMAM_submission");

                    b.Property<int>("OPDSAM_stock_submission");

                    b.Property<int>("OPDSAM_submission");

                    b.Property<string>("ProvCode");

                    b.Property<string>("Province");

                    b.Property<string>("TypeAbbrv");

                    b.Property<string>("UserName");

                    b.Property<int>("Year");

                    b.HasKey("NMRID");

                    b.ToTable("pvtSubmission");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist", b =>
                {
                    b.HasOne("DataSystem.Models.FacilityInfo", "ChkFacilityNav")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.FacilityTypes", "ChkFacilityTypeNav")
                        .WithMany()
                        .HasForeignKey("FacilityType");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkCGM", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkCGMs")
                        .HasForeignKey("ChkId")
                        .HasConstraintName("FK_ChkCGM_Checklist_ChkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkCGMs")
                        .HasForeignKey("IndId")
                        .HasConstraintName("FK_ChkCGM_lkpChecklist_IndId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkGM", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkGMs")
                        .HasForeignKey("GetChecklistChkId");

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkGMs")
                        .HasForeignKey("GetLkpChecklistIntId");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkIYCFHF", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkIYCFHFs")
                        .HasForeignKey("GetChecklistChkId");

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkIYCFHFs")
                        .HasForeignKey("GetLkpChecklistIntId");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkMN", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkMNs")
                        .HasForeignKey("GetChecklistChkId");

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkMNs")
                        .HasForeignKey("GetLkpChecklistIntId");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkOPT", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkOPTs")
                        .HasForeignKey("GetChecklistChkId");

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkOPTs")
                        .HasForeignKey("GetLkpChecklistIntId");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkSAMHF", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkSAMHFs")
                        .HasForeignKey("GetChecklistChkId");

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkSAMHFs")
                        .HasForeignKey("GetLkpChecklistIntId");
                });

            modelBuilder.Entity("DataSystem.Models.Checklist_subs.ChkSFP", b =>
                {
                    b.HasOne("DataSystem.Models.Checklist", "GetChecklist")
                        .WithMany("ChkSFPs")
                        .HasForeignKey("GetChecklistChkId");

                    b.HasOne("DataSystem.Models.lkpChecklist", "GetLkpChecklist")
                        .WithMany("ChkSFPs")
                        .HasForeignKey("GetLkpChecklistIntId");
                });

            modelBuilder.Entity("DataSystem.Models.Districts", b =>
                {
                    b.HasOne("DataSystem.Models.Provinces", "ProvCodeNavigation")
                        .WithMany("Districts")
                        .HasForeignKey("ProvCode")
                        .HasConstraintName("Districts${FD557F29-E1F2-49D5-A2AA-D987E7AF8819}")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.ERFacilities", b =>
                {
                    b.HasOne("DataSystem.Models.Districts", "DistNavigation")
                        .WithMany()
                        .HasForeignKey("DistCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.FacilityTypes", "FacilityTypeNavigation")
                        .WithMany()
                        .HasForeignKey("FacilityType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.EmrImamServices", b =>
                {
                    b.HasOne("DataSystem.Models.Ernmr", "Ernmr")
                        .WithMany("EmrImamServices")
                        .HasForeignKey("ErnmrId")
                        .HasConstraintName("FK_Ernmr_EmrImamServices")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.tlkpEmrIndicators", "tlkpEmrIndicators")
                        .WithMany("EmrImamServices")
                        .HasForeignKey("IndicatorId")
                        .HasConstraintName("FK_Ernmr_TlkpIndicators")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.EmrIndicators", b =>
                {
                    b.HasOne("DataSystem.Models.Ernmr", "Ernmr")
                        .WithMany("EmrIndicators")
                        .HasForeignKey("ErnmrId")
                        .HasConstraintName("FK_Ernmr_EmrIndicators")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.tlkpEmrIndicators", "lkpEmrIndicators")
                        .WithMany("EmrIndicators")
                        .HasForeignKey("IndicatorId")
                        .HasConstraintName("FK_Ernmr_lkpIndicators")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.Ernmr", b =>
                {
                    b.HasOne("DataSystem.Models.ERFacilities", "ErFacilityNavigation")
                        .WithMany("Ernmr")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.FacilityTypes", "ErFacilityTypeNavigation")
                        .WithMany()
                        .HasForeignKey("FacilityType");
                });

            modelBuilder.Entity("DataSystem.Models.FacilityInfo", b =>
                {
                    b.HasOne("DataSystem.Models.Districts", "DistNavigation")
                        .WithMany()
                        .HasForeignKey("DistCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.FacilityTypes", "FacilityTypeNavigation")
                        .WithMany()
                        .HasForeignKey("FacilityType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.Feedback", b =>
                {
                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("Feedback")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("FK_Feedback_NMR");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Column", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.Section", "Section")
                        .WithMany("Columns")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.GLM.DateValue", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.Report")
                        .WithMany("DateValues")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.GLM.ReportsView")
                        .WithMany("DateValues")
                        .HasForeignKey("ReportsViewId");
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Field", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.Column", "Column")
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.GLM.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.GLM.FieldOption", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.Field", "Field")
                        .WithMany("FieldOptions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Question", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Report", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.DataForm", "Dataform")
                        .WithMany()
                        .HasForeignKey("DataFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.Implementers")
                        .WithMany("Reports")
                        .HasForeignKey("ImpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.GLM.ReportsView", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.DataForm", "Dataforms")
                        .WithMany()
                        .HasForeignKey("DataFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.GLM.Section", b =>
                {
                    b.HasOne("DataSystem.Models.GLM.DataForm", "DataForm")
                        .WithMany("Sections")
                        .HasForeignKey("DataFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.LkpDisaggregation", b =>
                {
                    b.HasOne("DataSystem.Models.LkpCategory", "LkpCategory")
                        .WithMany("LkpDisaggregations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.MamreqDetails", b =>
                {
                    b.HasOne("DataSystem.Models.Mamreq", "R")
                        .WithMany("MamreqDetails")
                        .HasForeignKey("Rid")
                        .HasConstraintName("FK_MAMReqDetails_MAMReq")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpFstock", "SId")
                        .WithMany("MamreqDetails")
                        .HasForeignKey("SupplyId")
                        .HasConstraintName("FK_Mam_supply")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.Nmr", b =>
                {
                    b.HasOne("DataSystem.Models.FacilityInfo", "Facility")
                        .WithMany("Nmr")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK_NutritionMonthlyReport_FacilityInfo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataSystem.Models.LkpHfstatus", "HfactiveStatus")
                        .WithMany("Nmr")
                        .HasForeignKey("HfactiveStatusId")
                        .HasConstraintName("FK_NMR_lkpHFStatus");

                    b.HasOne("DataSystem.Models.TblkpStatus", "Status")
                        .WithMany("Nmr")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_NutritionMonthlyReport_tblkpStatus");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmEstNotification", b =>
                {
                    b.HasOne("DataSystem.Models.SCM.scmNotificationlist")
                        .WithMany("scmEstNotification")
                        .HasForeignKey("notifyId");
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmHFReqDetails", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpSstock", "Stocks")
                        .WithMany()
                        .HasForeignKey("supplyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmHFRequest", b =>
                {
                    b.HasOne("DataSystem.Models.FacilityInfo")
                        .WithMany("scmHFRequest")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmStocks", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpSstock", "TlkpSstockNav")
                        .WithMany("scmStocks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.SCM.scmWarehouses", "scmWarehousesNav")
                        .WithMany("scmStocks")
                        .HasForeignKey("WhId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmWarehouses", b =>
                {
                    b.HasOne("DataSystem.Models.Implementers", "ImplementerNav")
                        .WithMany("warehouses")
                        .HasForeignKey("ImpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.Provinces", "ProvincesNav")
                        .WithMany("warehouses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.SCM.scmRegions", "RegionsNav")
                        .WithMany("warehouses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.SCM.scmrptRequestpivot", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpSstock", "Stocks")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.SamreqDetails", b =>
                {
                    b.HasOne("DataSystem.Models.Samreq", "R")
                        .WithMany("SamreqDetails")
                        .HasForeignKey("Rid")
                        .HasConstraintName("FK_SAMReqDetails_SAMReq")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpSstock", "SId")
                        .WithMany("SamreqDetails")
                        .HasForeignKey("SupplyId")
                        .HasConstraintName("FK_tblSstock_tlkpSstock")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.SurveyResults", b =>
                {
                    b.HasOne("DataSystem.Models.LkpDisaggregation", "LkpDisaggregations")
                        .WithMany("SurveyResults")
                        .HasForeignKey("DisaggregId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.SurveyInfo", "SurveyInfoNav")
                        .WithMany("SurveyResults")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.lkpThematicArea", "LkpThematicAreas")
                        .WithMany("SurveyResults")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.TblFeedback", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpForms", "Form")
                        .WithMany("TblFeedback")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_tblFeedback_tlkpForms");

                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("TblFeedback")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("FK_tblFeedback_NMR");
                });

            modelBuilder.Entity("DataSystem.Models.TblFstock", b =>
                {
                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany()
                        .HasForeignKey("Nmrid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpFstock", "Stock")
                        .WithMany("TblFstock")
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK_tblFstock_tlkpFstock")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.TblIycf", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpIycf", "Iycf")
                        .WithMany("TblIycf")
                        .HasForeignKey("Iycfid")
                        .HasConstraintName("FK_tblIYCF_tlkpIYCF")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("TblIycf")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("tblIYCF${AC5A7038-0E9D-4C9A-A138-0D220C0EE76E}")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.TblMam", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpSfp", "Mam")
                        .WithMany("TblMam")
                        .HasForeignKey("Mamid")
                        .HasConstraintName("FK_tblSFP_tlkpSFP")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("TblMam")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("tblSFP${BAED6A63-58FC-494F-9438-DD42268ACE10}")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.TblMn", b =>
                {
                    b.HasOne("DataSystem.Models.TlkpMn", "Mn")
                        .WithMany("TblMn")
                        .HasForeignKey("Mnid")
                        .HasConstraintName("FK_tblMN_tlkpMN")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("TblMn")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("FK_tblMN_NutritionMonthlyReport")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataSystem.Models.TblOtp", b =>
                {
                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("TblOtp")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("tblOTP${B1E91814-65DA-4F6F-9B61-FF55C75C6E44}")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpOtptfu", "Otp")
                        .WithMany("TblOtp")
                        .HasForeignKey("Otpid")
                        .HasConstraintName("FK_tblOTP_tlkpOTPTFU")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.TblOtptfu", b =>
                {
                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany("TblOtptfu")
                        .HasForeignKey("Nmrid")
                        .HasConstraintName("tblOTPTFU${DFECED04-52F4-4144-96A7-63D61F5F34B5}")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpOtptfu", "Otptfu")
                        .WithMany("TblOtptfu")
                        .HasForeignKey("Otptfuid")
                        .HasConstraintName("FK_tblOTPTFU_tlkpOTPTFU")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.TblQnr", b =>
                {
                    b.HasOne("DataSystem.Models.Implementers", "ImpNavigation")
                        .WithMany()
                        .HasForeignKey("Implementer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.Provinces", "ProvNavigation")
                        .WithMany()
                        .HasForeignKey("Province");

                    b.HasOne("DataSystem.Models.TblkpStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("DataSystem.Models.TblStockIpt", b =>
                {
                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany()
                        .HasForeignKey("Nmrid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpSstock", "Sstock")
                        .WithMany("TblStockIpt")
                        .HasForeignKey("SstockId")
                        .HasConstraintName("FK_tblSstock_tlkpSstock")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataSystem.Models.TblStockOtp", b =>
                {
                    b.HasOne("DataSystem.Models.Nmr", "Nmr")
                        .WithMany()
                        .HasForeignKey("Nmrid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataSystem.Models.TlkpSstock", "Sstockotp")
                        .WithMany("TblStockOtp")
                        .HasForeignKey("SstockotpId")
                        .HasConstraintName("FK_tblSstock_otp_tlkpSstock")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}

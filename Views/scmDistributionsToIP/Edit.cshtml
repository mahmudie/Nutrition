@model DataSystem.Models.SCM.scmDistributionMain

@{
    ViewData["Title"] = "Edit Distribution";
}

@{
    var drpDocItems = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.DocSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "DocId", Text = "DocumentType" } };
    var drpItems = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.ItemSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "ItemId", Text = "ItemName" } };
    var drpWarehouses = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.WarehouseSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "WhId", Text = "WarehouseName" } };
    var drpStockItems = new Syncfusion.EJ2.DropDowns.DropDownList() { Change = "Changstock", DataSource = ViewBag.StockSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "StockId", Text = "StockItem" } };
    var drpUserUniItems = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.UserSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "UniUserId", Text = "UniUserName" } };
    var drpImpUserItems = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.ImpUserSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "ImpUserId", Text = "ImpUserName" } };
}
<style>
    .e-tab .e-tab-header .e-toolbar-item.e-active.e-ileft .e-tab-text, .e-tab .e-tab-header .e-toolbar-item.e-active.e-iright .e-tab-text {
        color: #e3165b !important;
        font-weight: bolder;
    }

    .e-tab .e-tab-header .e-toolbar-item.e-active.e-ileft .e-tab-icon, .e-tab .e-tab-header .e-toolbar-item.e-active.e-iright .e-tab-icon {
        color: #690f0f !important;
        font-size: 70pt;
        font-weight: bolder;
    }

    .e-tab1:before {
        content: "\F085";
        font-family: "fontawesome" !important;
        font-size: 50pt;
    }

    .e-tab2:before {
        content: "\F00B";
        font-family: "fontawesome" !important;
        font-size: 50pt;
    }

    .e-tab3:before {
        content: "\F012";
        font-family: "fontawesome" !important;
        font-size: 50pt;
    }

    .e-tab4:before {
        content: "\F012";
        font-family: "fontawesome" !important;
        font-size: 50pt;
    }
</style>
<div class="container-fluid">
    <h2>Edit Distribution</h2>
    <ejs-tab id="ej2Tab2" items="ViewBag.headeritems" heightAdjustMode="Content" overflowMode="Scrollable" created="tabCreated" animation="ViewBag.animation"></ejs-tab>
    <script>
        var tabObj;
        function tabCreated(args) {
            tabObj = document.getElementById("ej2Tab2").ej2_instances[0];
            //tabObj.enableTab(1, false);//disable second tab
            //tabObj.enableTab(2, false);//disable third tab
            //tabObj.enableTab(3, false);//disable fourth tab
            //document.getElementById("tabTwo").onclick = function (e) { tabNavigations(e); };
            //document.getElementById("tabThree").onclick = function (e) { tabNavigations(e); };
            //document.getElementById("tabFour").onclick = function (e) { tabNavigations(e); };
            //document.getElementById("prevTab1").onclick = function (e) { tabNavigations(e); };
            //document.getElementById("prevTab2").onclick = function (e) { tabNavigations(e); };
            //document.getElementById("prevTab3").onclick = function (e) { tabNavigations(e); };
        }
        function tabNavigations(args) {
            switch (args.target.id) {
                case "tabTwo":
                    tabObj.enableTab(1, true); // disable second tab
                    tabObj.enableTab(3, false);
                    tabObj.enableTab(2, false); // disble third tab
                    tabObj.enableTab(0, false); // disable first tab
                    break;

                case "tabThree":
                    tabObj.enableTab(2, true); // enable third tab
                    tabObj.enableTab(3, false);
                    tabObj.enableTab(1, false); // disable second tab
                    tabObj.enableTab(0, false); // disable first tab
                    break;

                case "tabFour":
                    tabObj.enableTab(3, true); // enable third tab
                    tabObj.enableTab(2, false); // enable third tab
                    tabObj.enableTab(1, false); // disable second tab
                    tabObj.enableTab(0, false); // disable first tab
                    break;

                case "prevTab1":
                    tabObj.enableTab(0, true);
                    tabObj.select(0);
                    tabObj.enableTab(3, false);
                    tabObj.enableTab(2, false);
                    tabObj.enableTab(1, false);

                    break;

                case "prevTab2":
                    tabObj.enableTab(1, true);
                    tabObj.select(1);
                    tabObj.enableTab(3, false);
                    tabObj.enableTab(2, false);
                    tabObj.enableTab(0, false);
                    break;

                case "prevTab3":
                    tabObj.enableTab(2, true);
                    tabObj.select(2);
                    tabObj.enableTab(3, false);
                    tabObj.enableTab(1, false);
                    tabObj.enableTab(0, false);
                    break;
            }
        }

    </script>
    <div style="display: none" id="Grid1">
        <form asp-action="Edit">
            <div class="row col-md-10">
                <table id="erfacilities" class="table table-condensed">
                    <tr>
                        <th>
                            Id
                        </th>
                        <td>
                            <div>
                                <input asp-for="DistributionId" class="form-control" />
                                <span asp-validation-for="DistributionId" class="text-danger" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <th>
                            Dist. Quarter
                        </th>
                        <td>
                            <div>
                                <select asp-items="ViewBag.RoundSource" asp-for="RoundId" class="form-control"></select>
                                <span asp-validation-for="RoundId" class="text-danger" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <th>
                            Implementer
                        </th>
                        <td>
                            <div>
                                <select asp-items="ViewBag.ImpSource" asp-for="ImpId" class="form-control"></select>
                                <span asp-validation-for="ImpId" class="text-danger" />
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <th>
                            Date From

                        </th>
                        <td>
                            <div>
                                <input asp-for="DateFrom" type="text" class="form-control" data-name="datepicker1" data-mddatetimepicker="true" data-targetselector="#DateFrom"
                                       data-trigger="click" data-enabletimepicker="false" data-isgregorian="true" data-englishnumber="true" placeholder="Click to Pick Date" />
                                <span asp-validation-for="DateFrom" class="text-danger" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <th>
                            Date Through
                        </th>
                        <td>
                            <div>
                                <input asp-for="DateTo" type="text" class="form-control" data-name="datepicker1" data-mddatetimepicker="true" data-targetselector="#DateTo"
                                       data-trigger="click" data-enabletimepicker="false" data-isgregorian="true" data-englishnumber="true" placeholder="Click to Pick Date" />
                                <span asp-validation-for="DateTo" class="text-danger" />
                            </div>
                        </td>
                    </tr>
                </table>
                <div class="form-group">
                    <div class="col-lg-offset-4 col-md-6">
                        <input type="submit" value="Save" class="btn btn-block btn-primary" />
                    </div>
                    <div>
                        <a asp-action="Index">Back </a>
                    </div>
                </div>
                <hr />
            </div>
        </form>
    </div>

    <div style="display:none" id="Grid2">
        @{
            List<object> commands = new List<object>();
            commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
            commands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
            commands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
        }
        <ejs-grid id="IPDist_GridTwo" allowSorting="true" allowTextWrap="true" allowResizing="true" recordDoubleClick="click" load="load" actionComplete="actionComplete" actionBegin="actionBegin" toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update"})" allowPaging="true">
            <e-data-manager url="/scmDistributionsToIP/UrlDataSource" adaptor="UrlAdaptor" insertUrl="/scmDistributionsToIP/Insert" updateUrl="/scmDistributionsToIP/Update" removeUrl="/scmDistributionsToIP/Remove"></e-data-manager>
            <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
            <e-grid-columns>
                <e-grid-column field="id" headerText="ID" isPrimaryKey="true" visible="false" textAlign="Left" width="80"></e-grid-column>
                <e-grid-column field="distributionId" headerText="DistId" visible="false" textAlign="Left" width="80"></e-grid-column>
                <e-grid-column field="stockId" foreignKeyField="StockId" validationRules="@(new { required=true})" headerText="Stock Item" foreignKeyValue="StockItem"
                               dataSource="ViewBag.StockSource" editType="dropdownedit" textAlign="Left" width="200" edit="new {@params = drpStockItems }"></e-grid-column>
                <e-grid-column field="batchNumber" allowEditing="false" headerText="Batch Number" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                <e-grid-column field="quantity" headerText="Quantity" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                <e-grid-column field="whId" foreignKeyField="WhId" validationRules="@(new { required=true})" headerText="Warehouse" clipMode="EllipsisWithTooltip" foreignKeyValue="WarehouseName"
                               dataSource="ViewBag.WarehouseSource" editType="dropdownedit" textAlign="Left" width="160" edit="new {@params = drpWarehouses }"></e-grid-column>

                <e-grid-column field="issueTo" foreignKeyField="ImpUserId" validationRules="@(new { required=true})" headerText="Issued To" foreignKeyValue="ImpUserName"
                               dataSource="ViewBag.ImpUserSource" editType="dropdownedit" textAlign="Left" width="200" edit="new {@params = drpImpUserItems }"></e-grid-column>

                <e-grid-column field="issueDate" headerText="Issue Date" editType="datepickeredit" customFormat="@(new {type = "datetime", format = "M/d/y" })" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                <e-grid-column field="issueBy" foreignKeyField="UserId" validationRules="@(new { required=true})" headerText="Issued By" foreignKeyValue="UserName"
                               dataSource="ViewBag.UserSource" editType="dropdownedit" textAlign="Left" width="150" edit="new {@params = drpUserUniItems }"></e-grid-column>
                <e-grid-column field="approveBy" foreignKeyField="UserId" validationRules="@(new { required=true})" headerText="Approved By" foreignKeyValue="UserName"
                               dataSource="ViewBag.UserSource" editType="dropdownedit" textAlign="Left" width="150" edit="new {@params = drpUserUniItems }"></e-grid-column>
                <e-grid-column field="apprveDate" headerText="Apprval Date" editType="datepickeredit" customFormat="@(new {type = "datetime", format = "M/d/y" })" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                <e-grid-column field="expiryDate" headerText="Expiry Date" validationRules="@(new { required=true})" editType="datepickeredit" customFormat="@(new {type = "datetime", format = "M/d/y" })" textAlign="Left" width="110"></e-grid-column>
                <e-grid-column headerText="Manage" width="100" commands="commands"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>

    </div>

    <div style="display:none" id="Grid3">

        <ejs-grid id="IPDist_GridThree" allowSorting="true" actionBegin="actionBegin" actionComplete="actionComplete" toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update"})" allowPaging="true">
            <e-data-manager url="/scmDistributionsToIP/DocUrlDatasource" adaptor="UrlAdaptor" insertUrl="/scmDistributionsToIP/DocInsert" updateUrl="/scmDistributionsToIP/DocUpdate" removeUrl="/scmDistributionsToIP/DocRemove"></e-data-manager>
            <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
            <e-grid-columns>
                <e-grid-column field="id" headerText="ID" isPrimaryKey="true" visible="false" textAlign="Left" width="80"></e-grid-column>
                <e-grid-column field="distributionId" allowEditing="false" headerText="Main ID" textAlign="Left" width="70"></e-grid-column>
                <e-grid-column field="docId" foreignKeyField="DocId" validationRules="@(new { required=true})" headerText="To" foreignKeyValue="DocumentType"
                               dataSource="ViewBag.DocSource" editType="dropdownedit" textAlign="Left" width="200" edit="new {@params = drpDocItems }"></e-grid-column>
                <e-grid-column field="documentName" headerText="Document Name" textAlign="Left" width="110"></e-grid-column>
                @*<e-grid-column field="emailFrom" allowEditing="false" headerText="Email From" textAlign="Left" width="110"></e-grid-column>*@
                <e-grid-column field="message" headerText="Email Message" edit="@(new {create = "create", read = "read", destroy = "destroy", write = "write"})" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                <e-grid-column field="fileName" headerText="File" type="string" template="#template" edit="@(new {create="fileCreate", read="fileRead", destroy="fileDestroy", write="fileWrite"  })" width="120"></e-grid-column>
                <e-grid-column field="dateSent" allowEditing="false" headerText="Date Email Sent" editType="datepickeredit" customFormat="@(new {type = "datetime", format = "M/d/y" })" textAlign="Left" width="110"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
    <div style="display:none" id="Grid4">
        <div class="col-md-12">
            <ejs-grid id="IPDist_Grid4" allowSorting="true" actionBegin="actionBegin" actionComplete="actionComplete" toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update"})" allowPaging="true">
                <e-data-manager url="/scmEmail/UrlDataSource" adaptor="UrlAdaptor" insertUrl="/scmEmail/Insert" updateUrl="/scmEmail/Update" removeUrl="/scmEmail/Remove"></e-data-manager>
                <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                <e-grid-columns>
                    <e-grid-column field="id" headerText="ID" isPrimaryKey="true" visible="false" textAlign="Left" width="80"></e-grid-column>
                    <e-grid-column field="distributionId" allowEditing="false" headerText="Main ID" textAlign="Left" width="70"></e-grid-column>
                    <e-grid-column field="emailToUser" foreignKeyField="ImpUserId" validationRules="@(new { required=true})" headerText="To" foreignKeyValue="ImpUserName"
                                   dataSource="ViewBag.ImpUserSource" editType="dropdownedit" textAlign="Left" width="200" edit="new {@params = drpImpUserItems }"></e-grid-column>
                    <e-grid-column field="emailToEmail" allowEditing="false" headerText="Email" textAlign="Left" width="110"></e-grid-column>
                    <e-grid-column field="emailFrom" allowEditing="false" headerText="Email From" textAlign="Left" width="110"></e-grid-column>
                    <e-grid-column field="message" headerText="Email Message" edit="@(new {create = "create", read = "read", destroy = "destroy", write = "write"})" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                    <e-grid-column field="dateSent" headerText="Date Email Sent" editType="datepickeredit" customFormat="@(new {type = "datetime", format = "M/d/y" })" validationRules="@(new { required=true})" textAlign="Left" width="110"></e-grid-column>
                </e-grid-columns>
            </ejs-grid>

        </div>
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script id="template" type="text/x-template">
        <a href=""></a>
    </script>

    <script>
        function actionComplete(args) {
            if ((args.requestType === 'beginEdit' || args.requestType === 'add')) {
                var dialog = args.dialog;
                dialog.width = 650;
            }
            //File upload
            if (args.requestType === 'add') {
                args.form.setAttribute('enctype', 'multipart/form-data');
                args.form.setAttribute('encoding', 'multipart/form-data');
            }
        }

        var balance = 0;
        function click(args) {
            //balance = +args.column.columnData[0].StockItem.split(",")[3].split("=")[1].trim();
            balance = this.getColumnByField("stockId").columnData[0]["StockItem"].split(",")[3].split("=")[1].trim();
        }
        function Changstock(args) {
            var grid = document.getElementsByClassName('e-grid')[0].ej2_instances[0];
            var arr = args.itemData.StockItem.split(",");
            balance2 = arr[3];
            balance = balance2.split("=")[1].trim();
            var regExp = /\(([^)]+)\)/;
            var batno = regExp.exec(arr[0]);                           //export the number by using regular expression
            var batno2 = batno[1].split("=")[1];;
            grid.editModule.formObj.element[2].value = batno2.trim();          //Update the value to grid form
        }

        function load(args) {
            this.columns[4].validationRules = { required: true, minLength: [customFn, 'Quantity is greater than balance'] };
        }

        function customFn(args) {
            return args['value'] < balance;
        };

    </script>
}
<script type="text/javascript">
    function actionBegin(args) {

        if (args.requestType === 'beginEdit' || args.requestType === 'add') {
            //debugger;
            ////assign value to corresponding key which helps to remove duplicate/conflicts
            //if (this.query.params[0] && this.query.params[0].key === 'ID') {   //Here you have to define the key property
            //    this.query.params[0].value = document.getElementById('id').value
            //} else {
            //    //if you want to send only to controller then use addparams
            //    this.query = this.query.addParams("ID", document.getElementById('id').value)  // initial time
            //    //Key             //Value
            //}

            if (!commandClick) {
                args.cancel = true;
                if (args.rowIndex != undefined)
                    var ID = this.currentViewData[args.rowIndex]["id"];
                if (args.requestType == "beginEdit")
                    var url = "/scmDistributionsToIP/Editfacilities/" + ID;
                else if (args.requestType == "add")
                    var url = "/scmDistributionsToIP/Editfacilities/" + 0;
                location.assign(url);
            }
            commandClick = false;
        }

        if (args.requestType == "save") {
            var dialogEditForm = args.form.closest(".e-dialog");
            ej.popups.createSpinner({ target: dialogEditForm, width: '20px' });
            ej.popups.showSpinner(dialogEditForm);
        }
    }

    var elem;
    var dObj;

    function create(args) {
        elem = document.createElement('textarea');
        return elem;
    }

    function write(args) {
        div.innerText = args.column.headerText;
        dObj = new ej.richtexteditor.RichTextEditor({
            // here you can customize your textEditor

            showCharCount: true, maxLength: 100, placeholder: 'Message something',
            value: args.rowData.message
        });
        dObj.appendTo(elem);
    }
    function destroy() {
        dObj.destroy();
    }

    function read(args) {
        return dObj.value;
    }

    //File download 
    var file;
    function queryCellInfo(args) {
        if (args.column.field === 'file') {
            if (args.data.file) {
                var anchotEle = args.cell.getElementsByTagName('a')[0];
                anchotEle.innerText = args.data.file.name;
                anchotEle.onclick = function click(args) {
                    args.target.setAttribute("href", "http://localhost:5052/scmDistributionMain/Download?filename=" + args.target.innerText);
                };
            }
        }
    }

    function fileCreate() {
        elem = document.createElement('input');
        return elem;
    }
    function fileRead(args) {
        return (file) ? file : uploadObj.filesData;
    }
    function fileDestroy() {
        uploadObj.destroy();
    }
    function fileWrite(args) {
        uploadObj = new ej.inputs.Uploader({
            files: (args.requestType === 'beginEdit') ? [args.rowData.file] : ['']
        });
        uploadObj.appendTo(elem)
    }

    window.customAdaptor = new ej.data.UrlAdaptor();
    function load() {
        this.dataSource.adaptor = customAdaptor;
    }

    customAdaptor = ej.base.extend(customAdaptor, {

        processResponse: function (data, ds, query, xhr, request, changes) {
            request.data = JSON.stringify(data);
            return ej.data.UrlAdaptor.prototype.processResponse.call(this, data, ds, query, xhr, request, changes)
        },
        insert: function (dm, data, tableName) {
            var fd = new FormData();
            for (var prop of data.file) {
                fd.append('UploadFiles', prop.rawFile);
            }
            fd.append('Id', data.Id);
            fd.append('DistributionId', data.DistributionId);
            // data.File = fd;
            return {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                type: "POST",
                data: fd,
                contentType: null
            }
        },
    });

    var commandClick;
    function toolbarClick(args) {
        if (args.name === 'toolbarClick')
            commandClick = true;
    }
</script>

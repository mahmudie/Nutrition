@{
    ViewData["Title"] = "Stock Movement Report";
}
@inject SignInManager<ApplicationUser> SignInManager
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    var RoudDropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.RoudSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "RoundId", Text = "RoundName" } };
    var ProvinceDropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.ProvinceSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "ProvinceId", Text = "Province" } };
    var ImpDropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.ImpSource, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "ImpId", Text = "ImpName" } };
}

    <div class="container-fluid">
        <div class="row">
            <h3>IP Warehouse Level Stock Movement</h3>
            @{
                List<object> commands = new List<object>();
                commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
                commands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
                commands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
            }
            <ejs-grid id="MovmntGrid1" allowSorting="true" actionComplete="actionComplete" toolbar="@(new List<string>() {"Edit","Search"})" toolbarClick="toolbarClick" actionBegin="Begin" allowPaging="true">
                <e-data-manager url="/scmStokmovmnt/UrlDataSource" adaptor="UrlAdaptor"></e-data-manager>
                <e-grid-editSettings allowAdding="false" allowDeleting="false" allowEditing="true" mode="Normal"></e-grid-editSettings>
                <e-grid-columns>
                    <e-grid-column field="id" headerText="ID" isPrimaryKey="true" isIdentity="true" textAlign="Left" width="80"></e-grid-column>
                    <e-grid-column field="implementer" headerText="Implementer" textAlign="Left" width="200"></e-grid-column>
                    <e-grid-column field="consignee" headerText="Warehouse/Consignee" validationRules="@(new { required=true})" textAlign="Left" width="330"></e-grid-column>
                    <e-grid-column headerText="Manage" width="120" commands="commands"></e-grid-column>

                </e-grid-columns>
            </ejs-grid>
        </div>
        @{
            List<object> commands2 = new List<object>();
            commands2.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
            commands2.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
            commands2.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
            var user = await UserManager.GetUserAsync(User);
        }

        @if (SignInManager.IsSignedIn(User) && User.IsInRole("administrator") && (user.Unicef == 1 || user.Pnd == 1))
        {

            <div class="row">
                <h3>Request Period Level Stock Movement</h3>
                <e-grid-editSettings allowAdding="false" allowDeleting="false" allowEditing="true" mode="Normal"></e-grid-editSettings>
                <ejs-grid id="MovmntGrid2" allowSorting="true" actionComplete="actionComplete" toolbar="@(new List<string>() { "Edit", "Search" })" toolbarClick="toolbarClick2" actionBegin="Begin2" allowPaging="true">
                    <e-data-manager url="/scmStokmovmnt/CUrlDataSource" adaptor="UrlAdaptor"></e-data-manager>
                    <e-grid-editSettings allowAdding="false" allowDeleting="false" allowEditing="true" mode="Normal"></e-grid-editSettings>
                    <e-grid-columns>
                        <e-grid-column field="roundId" headerText="ID" isPrimaryKey="true" visible="false" textAlign="Left" width="60"></e-grid-column>
                        <e-grid-column field="roundCode" headerText="Round Code" validationRules="@(new { required = true })" textAlign="Left" width="130"></e-grid-column>
                        <e-grid-column field="roundDescription" headerText="Description" validationRules="@(new { required = true })" textAlign="Left" width="200"></e-grid-column>
                        <e-grid-column field="periodFrom" headerText="Period From" editType="datepickeredit" customFormat="@(new { type = "datetime", format = "M/d/y" })" validationRules="@(new { required = true })" textAlign="Left" width="100"></e-grid-column>
                        <e-grid-column field="periodTo" headerText="Period To" editType="datepickeredit" customFormat="@(new { type = "datetime", format = "M/d/y" })" validationRules="@(new { required = true })" textAlign="Left" width="100"></e-grid-column>                    \
                        <e-grid-column headerText="Manage" width="120" commands="commands2"></e-grid-column>
                    </e-grid-columns>
                </ejs-grid>

            </div>
        }
    </div>
@section Scripts{

}


<script>
    function actionComplete(args) {
        if ((args.requestType === 'beginEdit' || args.requestType === 'add')) {
            var dialog = args.dialog;
            dialog.width = 650;
            // change the header of the dialog
            dialog.header = args.requestType === 'beginEdit' ? 'Record of ' + args.rowData['id'] : 'New';
        }
    }

    var commandClick;
    function toolbarClick(args) {
        if (args.name === 'toolbarClick')
            commandClick = true;
    }

    function Begin(args) {
        var type = args.requestType;
        if (type == "beginEdit" || type == "add") {
            if (!commandClick) {
                args.cancel = true;
                if (args.rowIndex != undefined)
                    var ID = this.currentViewData[args.rowIndex]["id"];
                if (type == "beginEdit")
                    var url = "/scmStokmovmnt/Gensingxl/" + ID;
                else if (type == "add")
                    var url = "/scmStokmovmnt/Gensingxl/" + null;
                location.assign(url);
            }
            commandClick = false;
        }
    }


    //Period level stock movement
    var commandClick2;
    function toolbarClick2(args) {
        if (args.name === 'toolbarClick')
            commandClick2 = true;
    }

    function Begin2(args) {
        var type = args.requestType;
        if (type == "beginEdit" || type == "add") {
            if (!commandClick2) {
                args.cancel = true;
                if (args.rowIndex != undefined)
                    var ID = this.currentViewData[args.rowIndex]["roundId"];
                if (type == "beginEdit")
                    var url = "/scmStokmovmnt/Genmultxl/" + ID;
                else if (type == "add")
                    var url = "/scmStokmovmnt/Genmultxl/" + 0;
                location.assign(url);
            }
            commandClick2 = false;
        }
    }

</script>